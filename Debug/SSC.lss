
SSC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001cf4  00001d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018b  00800106  00800106  00001d8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c34  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001841  00000000  00000000  00006ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001411  00000000  00000000  00008315  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000868  00000000  00000000  00009728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000173b  00000000  00000000  00009f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002096  00000000  00000000  0000b6cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000d761  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_10>
      2c:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_11>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_20>
      54:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_21>
      58:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_22>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      ac:	67 0b       	sbc	r22, r23
      ae:	6b 0b       	sbc	r22, r27
      b0:	81 0b       	sbc	r24, r17
      b2:	6d 0b       	sbc	r22, r29
      b4:	81 0b       	sbc	r24, r17
      b6:	6f 0b       	sbc	r22, r31
      b8:	76 0b       	sbc	r23, r22
      ba:	c1 0b       	sbc	r28, r17
      bc:	c1 0b       	sbc	r28, r17
      be:	7a 0b       	sbc	r23, r26
      c0:	c1 0b       	sbc	r28, r17
      c2:	c1 0b       	sbc	r28, r17

000000c4 <__ctors_start>:
      c4:	14 04       	cpc	r1, r4

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	da e0       	ldi	r29, 0x0A	; 10
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e4 ef       	ldi	r30, 0xF4	; 244
      da:	fc e1       	ldi	r31, 0x1C	; 28
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a6 30       	cpi	r26, 0x06	; 6
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	a6 e0       	ldi	r26, 0x06	; 6
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a1 39       	cpi	r26, 0x91	; 145
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c3 e6       	ldi	r28, 0x63	; 99
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	21 97       	sbiw	r28, 0x01	; 1
     102:	fe 01       	movw	r30, r28
     104:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__tablejump2__>
     108:	c2 36       	cpi	r28, 0x62	; 98
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 aa 03 	call	0x754	; 0x754 <main>
     112:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_ZN10ledControl6addPinEhP5pinIO>:
 #include <util/delay.h>
 #include "led.h"
 #include "../pincontrol.h"

 void ledControl::addPin(uint8_t num, pinIO *control){
    if( num > 7 ){
     11a:	68 30       	cpi	r22, 0x08	; 8
     11c:	40 f4       	brcc	.+16     	; 0x12e <_ZN10ledControl6addPinEhP5pinIO+0x14>
      return;
    }
    this->ledPin[num] = control;
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	66 0f       	add	r22, r22
     122:	77 1f       	adc	r23, r23
     124:	fc 01       	movw	r30, r24
     126:	e6 0f       	add	r30, r22
     128:	f7 1f       	adc	r31, r23
     12a:	51 83       	std	Z+1, r21	; 0x01
     12c:	40 83       	st	Z, r20
     12e:	08 95       	ret

00000130 <_ZN10ledControl5blinkEhjj>:
 }

 void ledControl::blink(uint8_t leds,uint16_t tOn, uint16_t tOff){
     130:	7f 92       	push	r7
     132:	8f 92       	push	r8
     134:	9f 92       	push	r9
     136:	af 92       	push	r10
     138:	bf 92       	push	r11
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	76 2e       	mov	r7, r22
     14c:	ea 01       	movw	r28, r20
     14e:	89 01       	movw	r16, r18
     150:	c8 2e       	mov	r12, r24
     152:	d9 2e       	mov	r13, r25
     154:	a8 2e       	mov	r10, r24
     156:	b9 2e       	mov	r11, r25
     158:	e1 2c       	mov	r14, r1
     15a:	f1 2c       	mov	r15, r1
    uint8_t mask,i;
    for(i = 0; i<7; i++){
      mask = 1<<i;
     15c:	88 24       	eor	r8, r8
     15e:	83 94       	inc	r8
     160:	91 2c       	mov	r9, r1
     162:	c4 01       	movw	r24, r8
     164:	0e 2c       	mov	r0, r14
     166:	02 c0       	rjmp	.+4      	; 0x16c <_ZN10ledControl5blinkEhjj+0x3c>
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	0a 94       	dec	r0
     16e:	e2 f7       	brpl	.-8      	; 0x168 <_ZN10ledControl5blinkEhjj+0x38>
      if( ( (leds&mask) == mask ) && (this->ledPin[i] != 0) ){
     170:	97 2d       	mov	r25, r7
     172:	98 23       	and	r25, r24
     174:	98 13       	cpse	r25, r24
     176:	07 c0       	rjmp	.+14     	; 0x186 <_ZN10ledControl5blinkEhjj+0x56>
     178:	f5 01       	movw	r30, r10
     17a:	80 81       	ld	r24, Z
     17c:	91 81       	ldd	r25, Z+1	; 0x01
     17e:	00 97       	sbiw	r24, 0x00	; 0
     180:	11 f0       	breq	.+4      	; 0x186 <_ZN10ledControl5blinkEhjj+0x56>
        this->ledPin[i]->Set();
     182:	0e 94 2e 04 	call	0x85c	; 0x85c <_ZN5pinIO3SetEv>
     186:	ff ef       	ldi	r31, 0xFF	; 255
     188:	ef 1a       	sub	r14, r31
     18a:	ff 0a       	sbc	r15, r31
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	a2 0e       	add	r10, r18
     190:	b1 1c       	adc	r11, r1
    this->ledPin[num] = control;
 }

 void ledControl::blink(uint8_t leds,uint16_t tOn, uint16_t tOff){
    uint8_t mask,i;
    for(i = 0; i<7; i++){
     192:	87 e0       	ldi	r24, 0x07	; 7
     194:	e8 16       	cp	r14, r24
     196:	f1 04       	cpc	r15, r1
     198:	21 f7       	brne	.-56     	; 0x162 <_ZN10ledControl5blinkEhjj+0x32>
      if( ( (leds&mask) == mask ) && (this->ledPin[i] != 0) ){
        this->ledPin[i]->Set();
      }
    }

    while(tOn--){
     19a:	20 97       	sbiw	r28, 0x00	; 0
     19c:	91 f1       	breq	.+100    	; 0x202 <_ZN10ledControl5blinkEhjj+0xd2>
     19e:	ae 01       	movw	r20, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a0:	e9 ef       	ldi	r30, 0xF9	; 249
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	31 97       	sbiw	r30, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <_ZN10ledControl5blinkEhjj+0x74>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <_ZN10ledControl5blinkEhjj+0x7a>
     1aa:	00 00       	nop
     1ac:	41 50       	subi	r20, 0x01	; 1
     1ae:	51 09       	sbc	r21, r1
     1b0:	b9 f7       	brne	.-18     	; 0x1a0 <_ZN10ledControl5blinkEhjj+0x70>
     1b2:	27 c0       	rjmp	.+78     	; 0x202 <_ZN10ledControl5blinkEhjj+0xd2>
      _delay_us(1000);
    }

    for(i = 0; i<7; i++){
      mask = 1<<i;
     1b4:	c7 01       	movw	r24, r14
     1b6:	0c 2e       	mov	r0, r28
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <_ZN10ledControl5blinkEhjj+0x8e>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	0a 94       	dec	r0
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <_ZN10ledControl5blinkEhjj+0x8a>
      if( ( (leds&mask) == mask ) && (this->ledPin[i] != 0) ){
     1c2:	97 2d       	mov	r25, r7
     1c4:	98 23       	and	r25, r24
     1c6:	98 13       	cpse	r25, r24
     1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <_ZN10ledControl5blinkEhjj+0xa8>
     1ca:	f6 01       	movw	r30, r12
     1cc:	80 81       	ld	r24, Z
     1ce:	91 81       	ldd	r25, Z+1	; 0x01
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	11 f0       	breq	.+4      	; 0x1d8 <_ZN10ledControl5blinkEhjj+0xa8>
        this->ledPin[i]->Clr();
     1d4:	0e 94 3f 04 	call	0x87e	; 0x87e <_ZN5pinIO3ClrEv>
     1d8:	21 96       	adiw	r28, 0x01	; 1
     1da:	f2 e0       	ldi	r31, 0x02	; 2
     1dc:	cf 0e       	add	r12, r31
     1de:	d1 1c       	adc	r13, r1

    while(tOn--){
      _delay_us(1000);
    }

    for(i = 0; i<7; i++){
     1e0:	c7 30       	cpi	r28, 0x07	; 7
     1e2:	d1 05       	cpc	r29, r1
     1e4:	39 f7       	brne	.-50     	; 0x1b4 <_ZN10ledControl5blinkEhjj+0x84>
      if( ( (leds&mask) == mask ) && (this->ledPin[i] != 0) ){
        this->ledPin[i]->Clr();
      }
    }

    while(tOff--){
     1e6:	01 15       	cp	r16, r1
     1e8:	11 05       	cpc	r17, r1
     1ea:	89 f0       	breq	.+34     	; 0x20e <_ZN10ledControl5blinkEhjj+0xde>
     1ec:	98 01       	movw	r18, r16
     1ee:	89 ef       	ldi	r24, 0xF9	; 249
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_ZN10ledControl5blinkEhjj+0xc2>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_ZN10ledControl5blinkEhjj+0xc8>
     1f8:	00 00       	nop
     1fa:	21 50       	subi	r18, 0x01	; 1
     1fc:	31 09       	sbc	r19, r1
     1fe:	b9 f7       	brne	.-18     	; 0x1ee <_ZN10ledControl5blinkEhjj+0xbe>
     200:	06 c0       	rjmp	.+12     	; 0x20e <_ZN10ledControl5blinkEhjj+0xde>
      if( ( (leds&mask) == mask ) && (this->ledPin[i] != 0) ){
        this->ledPin[i]->Set();
      }
    }

    while(tOn--){
     202:	c0 e0       	ldi	r28, 0x00	; 0
     204:	d0 e0       	ldi	r29, 0x00	; 0
      _delay_us(1000);
    }

    for(i = 0; i<7; i++){
      mask = 1<<i;
     206:	ee 24       	eor	r14, r14
     208:	e3 94       	inc	r14
     20a:	f1 2c       	mov	r15, r1
     20c:	d3 cf       	rjmp	.-90     	; 0x1b4 <_ZN10ledControl5blinkEhjj+0x84>
    }

    while(tOff--){
      _delay_us(1000);
    }
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	ff 90       	pop	r15
     218:	ef 90       	pop	r14
     21a:	df 90       	pop	r13
     21c:	cf 90       	pop	r12
     21e:	bf 90       	pop	r11
     220:	af 90       	pop	r10
     222:	9f 90       	pop	r9
     224:	8f 90       	pop	r8
     226:	7f 90       	pop	r7
     228:	08 95       	ret

0000022a <_Z11onGetStatusP3USB>:
  isWork = false;    
  TIFR1 &= ~(1<<TOV1);
}

bool onGetStatus(USB *handle){    
  handle->writeBuf((const uint8_t*)&status,sizeof(DEVICE_STATUS),16);  
     22a:	20 e1       	ldi	r18, 0x10	; 16
     22c:	4d e0       	ldi	r20, 0x0D	; 13
     22e:	6c e2       	ldi	r22, 0x2C	; 44
     230:	71 e0       	ldi	r23, 0x01	; 1
     232:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN3USB8writeBufEPKhhh>
  return true;  
}
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	08 95       	ret

0000023a <_Z9onSetDataP3USB>:

bool onSetData(USB *handle){    
     23a:	0f 93       	push	r16
     23c:	cf 93       	push	r28
  uint16_t cnt = UEBCX;
     23e:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     242:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
  handle->readBuf((uint8_t*)&dp, cnt);
     246:	65 e2       	ldi	r22, 0x25	; 37
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_ZN3USB7readBufEPhh>

  isError = !stepControl.isDone();  
     24e:	81 e5       	ldi	r24, 0x51	; 81
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN11StepControl6isDoneEv>
     256:	c1 e0       	ldi	r28, 0x01	; 1
     258:	8c 27       	eor	r24, r28
     25a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <isError>
  stepControl.goTo(dp.posX, dp.posY, dp.posZ, dp.coils);
     25e:	e5 e2       	ldi	r30, 0x25	; 37
     260:	f1 e0       	ldi	r31, 0x01	; 1
     262:	06 81       	ldd	r16, Z+6	; 0x06
     264:	24 81       	ldd	r18, Z+4	; 0x04
     266:	35 81       	ldd	r19, Z+5	; 0x05
     268:	42 81       	ldd	r20, Z+2	; 0x02
     26a:	53 81       	ldd	r21, Z+3	; 0x03
     26c:	60 81       	ld	r22, Z
     26e:	71 81       	ldd	r23, Z+1	; 0x01
     270:	81 e5       	ldi	r24, 0x51	; 81
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN11StepControl4goToEiiih>
  fullPosition++;
     278:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fullPosition>
     27c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <fullPosition+0x1>
     280:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <fullPosition+0x2>
     284:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <fullPosition+0x3>
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	a1 1d       	adc	r26, r1
     28c:	b1 1d       	adc	r27, r1
     28e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fullPosition>
     292:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <fullPosition+0x1>
     296:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <fullPosition+0x2>
     29a:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <fullPosition+0x3>
  isWork = true;  
     29e:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <isWork>
  return true;
}
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	cf 91       	pop	r28
     2a6:	0f 91       	pop	r16
     2a8:	08 95       	ret

000002aa <_Z9onControlP3USB18USB_Request_Header>:

bool onControl(USB *handle, USB_Request_Header head){
     2aa:	8f 92       	push	r8
     2ac:	9f 92       	push	r9
     2ae:	af 92       	push	r10
     2b0:	bf 92       	push	r11
     2b2:	cf 92       	push	r12
     2b4:	df 92       	push	r13
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	60 97       	sbiw	r28, 0x10	; 16
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	6c 2d       	mov	r22, r12
  switch(head.bRequest) {
     2d4:	89 2d       	mov	r24, r9
     2d6:	82 3a       	cpi	r24, 0xA2	; 162
     2d8:	59 f1       	breq	.+86     	; 0x330 <_Z9onControlP3USB18USB_Request_Header+0x86>
     2da:	28 f4       	brcc	.+10     	; 0x2e6 <_Z9onControlP3USB18USB_Request_Header+0x3c>
     2dc:	80 3a       	cpi	r24, 0xA0	; 160
     2de:	51 f0       	breq	.+20     	; 0x2f4 <_Z9onControlP3USB18USB_Request_Header+0x4a>
     2e0:	81 3a       	cpi	r24, 0xA1	; 161
     2e2:	d9 f0       	breq	.+54     	; 0x31a <_Z9onControlP3USB18USB_Request_Header+0x70>
     2e4:	55 c0       	rjmp	.+170    	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
     2e6:	84 3a       	cpi	r24, 0xA4	; 164
     2e8:	91 f1       	breq	.+100    	; 0x34e <_Z9onControlP3USB18USB_Request_Header+0xa4>
     2ea:	60 f1       	brcs	.+88     	; 0x344 <_Z9onControlP3USB18USB_Request_Header+0x9a>
     2ec:	85 3a       	cpi	r24, 0xA5	; 165
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <_Z9onControlP3USB18USB_Request_Header+0x48>
     2f0:	4c c0       	rjmp	.+152    	; 0x38a <_Z9onControlP3USB18USB_Request_Header+0xe0>
     2f2:	4e c0       	rjmp	.+156    	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
    case 0xA0:
        TIMER_STEP_STOP;
     2f4:	15 bc       	out	0x25, r1	; 37
          fullPosition = (head.wValueH<<8) | head.wValueL;
     2f6:	8a 2d       	mov	r24, r10
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	9b 29       	or	r25, r11
     2fc:	09 2e       	mov	r0, r25
     2fe:	00 0c       	add	r0, r0
     300:	aa 0b       	sbc	r26, r26
     302:	bb 0b       	sbc	r27, r27
     304:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fullPosition>
     308:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <fullPosition+0x1>
     30c:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <fullPosition+0x2>
     310:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <fullPosition+0x3>
        TIMER_STEP_START;
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	85 bd       	out	0x25, r24	; 37
      break;
     318:	3b c0       	rjmp	.+118    	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
    case 0xA1:
        TIMER_STEP_STOP;
     31a:	15 bc       	out	0x25, r1	; 37
          stepControl.proclaimPois(head.wIndexL,(head.wValueH<<8)|head.wValueL);
     31c:	4a 2d       	mov	r20, r10
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	5b 29       	or	r21, r11
     322:	81 e5       	ldi	r24, 0x51	; 81
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 af 04 	call	0x95e	; 0x95e <_ZN11StepControl12proclaimPoisEhi>
        TIMER_STEP_START;
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	85 bd       	out	0x25, r24	; 37
      break;
     32e:	30 c0       	rjmp	.+96     	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
    case 0xA2:
        TIMER_STEP_STOP;
     330:	15 bc       	out	0x25, r1	; 37
        OCR0B = head.wValueL>>1;
     332:	8a 2d       	mov	r24, r10
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	95 95       	asr	r25
     338:	87 95       	ror	r24
     33a:	88 bd       	out	0x28, r24	; 40
        OCR0A = head.wValueL;        
     33c:	a7 bc       	out	0x27, r10	; 39
        TIMER_STEP_START;
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	85 bd       	out	0x25, r24	; 37
      break;
     342:	26 c0       	rjmp	.+76     	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
    case 0xA3:
        isFault = false;
     344:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <isFault>
        TIMER_STEP_START;
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	85 bd       	out	0x25, r24	; 37
      break;
     34c:	21 c0       	rjmp	.+66     	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
    case 0xA4:
        if( head.wIndexL == 0 ){
     34e:	c1 10       	cpse	r12, r1
     350:	08 c0       	rjmp	.+16     	; 0x362 <_Z9onControlP3USB18USB_Request_Header+0xb8>
          dZeroA = (head.wValueH<<8)|head.wValueL;
     352:	8a 2d       	mov	r24, r10
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	9b 29       	or	r25, r11
     358:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <dZeroA+0x1>
     35c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dZeroA>
     360:	17 c0       	rjmp	.+46     	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
        } else if(head.wIndexL == 1){
     362:	61 30       	cpi	r22, 0x01	; 1
     364:	41 f4       	brne	.+16     	; 0x376 <_Z9onControlP3USB18USB_Request_Header+0xcc>
          dZeroB = (head.wValueH<<8)|head.wValueL;
     366:	8a 2d       	mov	r24, r10
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	9b 29       	or	r25, r11
     36c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <dZeroB+0x1>
     370:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dZeroB>
     374:	0d c0       	rjmp	.+26     	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
        } else if(head.wIndexL == 2){
     376:	62 30       	cpi	r22, 0x02	; 2
     378:	59 f4       	brne	.+22     	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
          dZeroC = (head.wValueH<<8)|head.wValueL;
     37a:	8a 2d       	mov	r24, r10
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	9b 29       	or	r25, r11
     380:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     384:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     388:	03 c0       	rjmp	.+6      	; 0x390 <_Z9onControlP3USB18USB_Request_Header+0xe6>
        }
      break;
    case 0xA5:
        isStartInit = true;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
      break;
  }
  return true;
}
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	60 96       	adiw	r28, 0x10	; 16
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	df 90       	pop	r13
     3ac:	cf 90       	pop	r12
     3ae:	bf 90       	pop	r11
     3b0:	af 90       	pop	r10
     3b2:	9f 90       	pop	r9
     3b4:	8f 90       	pop	r8
     3b6:	08 95       	ret

000003b8 <__vector_10>:
bool isWork   = false;
bool isError  = false;
bool isFault  = false;
bool isStartInit = false;

ISR(USB_GEN_vect, ISR_BLOCK){
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	4f 93       	push	r20
     3c8:	5f 93       	push	r21
     3ca:	6f 93       	push	r22
     3cc:	7f 93       	push	r23
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	ef 93       	push	r30
     3d8:	ff 93       	push	r31
  USB::onGenEvent((USB*)&usbControl);  
     3da:	8f e6       	ldi	r24, 0x6F	; 111
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN3USB10onGenEventEPS_>
}
     3e2:	ff 91       	pop	r31
     3e4:	ef 91       	pop	r30
     3e6:	bf 91       	pop	r27
     3e8:	af 91       	pop	r26
     3ea:	9f 91       	pop	r25
     3ec:	8f 91       	pop	r24
     3ee:	7f 91       	pop	r23
     3f0:	6f 91       	pop	r22
     3f2:	5f 91       	pop	r21
     3f4:	4f 91       	pop	r20
     3f6:	3f 91       	pop	r19
     3f8:	2f 91       	pop	r18
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <__vector_11>:

ISR(USB_COM_vect, ISR_BLOCK) { 
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	4f 93       	push	r20
     414:	5f 93       	push	r21
     416:	6f 93       	push	r22
     418:	7f 93       	push	r23
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	af 93       	push	r26
     420:	bf 93       	push	r27
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
  USB::onComEvent((USB*)&usbControl);
     426:	8f e6       	ldi	r24, 0x6F	; 111
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN3USB10onComEventEPS_>
}
     42e:	ff 91       	pop	r31
     430:	ef 91       	pop	r30
     432:	bf 91       	pop	r27
     434:	af 91       	pop	r26
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	7f 91       	pop	r23
     43c:	6f 91       	pop	r22
     43e:	5f 91       	pop	r21
     440:	4f 91       	pop	r20
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <__vector_21>:

ISR(TIMER0_COMPA_vect, ISR_NOBLOCK){
     450:	78 94       	sei
     452:	1f 92       	push	r1
     454:	0f 92       	push	r0
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	0f 92       	push	r0
     45a:	11 24       	eor	r1, r1
     45c:	2f 93       	push	r18
     45e:	3f 93       	push	r19
     460:	4f 93       	push	r20
     462:	5f 93       	push	r21
     464:	6f 93       	push	r22
     466:	7f 93       	push	r23
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	af 93       	push	r26
     46e:	bf 93       	push	r27
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
  stepControl.onFall(&stepControl);  
     474:	81 e5       	ldi	r24, 0x51	; 81
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN11StepControl6onFallEPS_>
  TIFR0 &= ~(1<<OCR0A);
     47c:	37 b5       	in	r19, 0x27	; 39
     47e:	25 b3       	in	r18, 0x15	; 21
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	02 c0       	rjmp	.+4      	; 0x48a <__vector_21+0x3a>
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	3a 95       	dec	r19
     48c:	e2 f7       	brpl	.-8      	; 0x486 <__vector_21+0x36>
     48e:	80 95       	com	r24
     490:	90 95       	com	r25
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	82 23       	and	r24, r18
     496:	93 23       	and	r25, r19
     498:	85 bb       	out	0x15, r24	; 21
}
     49a:	ff 91       	pop	r31
     49c:	ef 91       	pop	r30
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <__vector_22>:

ISR(TIMER0_COMPB_vect, ISR_NOBLOCK){  
     4bc:	78 94       	sei
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	0f 92       	push	r0
     4c6:	11 24       	eor	r1, r1
     4c8:	2f 93       	push	r18
     4ca:	3f 93       	push	r19
     4cc:	4f 93       	push	r20
     4ce:	5f 93       	push	r21
     4d0:	6f 93       	push	r22
     4d2:	7f 93       	push	r23
     4d4:	8f 93       	push	r24
     4d6:	9f 93       	push	r25
     4d8:	af 93       	push	r26
     4da:	bf 93       	push	r27
     4dc:	ef 93       	push	r30
     4de:	ff 93       	push	r31
  stepControl.onRise(&stepControl);
     4e0:	81 e5       	ldi	r24, 0x51	; 81
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11StepControl6onRiseEPS_>
  TIFR0 &= ~(1<<OCR0B);
     4e8:	38 b5       	in	r19, 0x28	; 40
     4ea:	25 b3       	in	r18, 0x15	; 21
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__vector_22+0x3a>
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	3a 95       	dec	r19
     4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__vector_22+0x36>
     4fa:	80 95       	com	r24
     4fc:	90 95       	com	r25
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	82 23       	and	r24, r18
     502:	93 23       	and	r25, r19
     504:	85 bb       	out	0x15, r24	; 21
}
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	bf 91       	pop	r27
     50c:	af 91       	pop	r26
     50e:	9f 91       	pop	r25
     510:	8f 91       	pop	r24
     512:	7f 91       	pop	r23
     514:	6f 91       	pop	r22
     516:	5f 91       	pop	r21
     518:	4f 91       	pop	r20
     51a:	3f 91       	pop	r19
     51c:	2f 91       	pop	r18
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <__vector_20>:

ISR(TIMER1_OVF_vect,ISR_NOBLOCK){
     528:	78 94       	sei
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	2f 93       	push	r18
     536:	3f 93       	push	r19
     538:	4f 93       	push	r20
     53a:	5f 93       	push	r21
     53c:	6f 93       	push	r22
     53e:	7f 93       	push	r23
     540:	8f 93       	push	r24
     542:	9f 93       	push	r25
     544:	af 93       	push	r26
     546:	bf 93       	push	r27
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ef 93       	push	r30
     54e:	ff 93       	push	r31
  ENABLE;
  TIMER_STEP_START;  
}

inline void saveStatus(){    
  status.position     = fullPosition;
     550:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fullPosition>
     554:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <fullPosition+0x1>
     558:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <fullPosition+0x2>
     55c:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <fullPosition+0x3>
     560:	cc e2       	ldi	r28, 0x2C	; 44
     562:	d1 e0       	ldi	r29, 0x01	; 1
     564:	89 87       	std	Y+9, r24	; 0x09
     566:	9a 87       	std	Y+10, r25	; 0x0a
     568:	ab 87       	std	Y+11, r26	; 0x0b
     56a:	bc 87       	std	Y+12, r27	; 0x0c
  status.point.posX   = stepControl.getPosA();
     56c:	81 e5       	ldi	r24, 0x51	; 81
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN11StepControl7getPosAEv>
     574:	99 83       	std	Y+1, r25	; 0x01
     576:	88 83       	st	Y, r24
  status.point.posY   = stepControl.getPosB();
     578:	81 e5       	ldi	r24, 0x51	; 81
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN11StepControl7getPosBEv>
     580:	9b 83       	std	Y+3, r25	; 0x03
     582:	8a 83       	std	Y+2, r24	; 0x02
  status.point.posZ   = stepControl.getPosC();
     584:	81 e5       	ldi	r24, 0x51	; 81
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN11StepControl7getPosCEv>
     58c:	9d 83       	std	Y+5, r25	; 0x05
     58e:	8c 83       	std	Y+4, r24	; 0x04
  status.point.coils  = stepControl.getCoils();
     590:	81 e5       	ldi	r24, 0x51	; 81
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11StepControl8getCoilsEv>
     598:	8e 83       	std	Y+6, r24	; 0x06
  status.inputs       = stepControl.getInputs();
     59a:	81 e5       	ldi	r24, 0x51	; 81
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN11StepControl9getInputsEv>
     5a2:	8f 83       	std	Y+7, r24	; 0x07
  status.status       = (isFault << 3) | (isError << 2) | (isWork<<1) | (isInit);
     5a4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <isFault>
     5a8:	28 2f       	mov	r18, r24
     5aa:	22 0f       	add	r18, r18
     5ac:	22 0f       	add	r18, r18
     5ae:	22 0f       	add	r18, r18
     5b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <isError>
     5b4:	88 0f       	add	r24, r24
     5b6:	88 0f       	add	r24, r24
     5b8:	82 2b       	or	r24, r18
     5ba:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <isInit>
     5be:	98 2f       	mov	r25, r24
     5c0:	92 2b       	or	r25, r18
     5c2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <isWork>
     5c6:	88 0f       	add	r24, r24
     5c8:	89 2b       	or	r24, r25
     5ca:	88 87       	std	Y+8, r24	; 0x08
  TIFR0 &= ~(1<<OCR0B);
}

ISR(TIMER1_OVF_vect,ISR_NOBLOCK){
  saveStatus();
  isWork = false;    
     5cc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <isWork>
  TIFR1 &= ~(1<<TOV1);
     5d0:	b0 98       	cbi	0x16, 0	; 22
}
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	bf 91       	pop	r27
     5dc:	af 91       	pop	r26
     5de:	9f 91       	pop	r25
     5e0:	8f 91       	pop	r24
     5e2:	7f 91       	pop	r23
     5e4:	6f 91       	pop	r22
     5e6:	5f 91       	pop	r21
     5e8:	4f 91       	pop	r20
     5ea:	3f 91       	pop	r19
     5ec:	2f 91       	pop	r18
     5ee:	0f 90       	pop	r0
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	0f 90       	pop	r0
     5f4:	1f 90       	pop	r1
     5f6:	18 95       	reti

000005f8 <_Z7initUSBv>:
      break;
  }
  return true;
}

void initUSB(){
     5f8:	8f 92       	push	r8
     5fa:	9f 92       	push	r9
     5fc:	af 92       	push	r10
     5fe:	cf 92       	push	r12
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	28 97       	sbiw	r28, 0x08	; 8
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
  USB_Endpoint_Definition ep;
    
  ep.type     = INT;
     61c:	83 e0       	ldi	r24, 0x03	; 3
     61e:	8a 83       	std	Y+2, r24	; 0x02
  ep.dir      = IN;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	8b 83       	std	Y+3, r24	; 0x03
  ep.size     = SIZE16;
     624:	8c 83       	std	Y+4, r24	; 0x04
  ep.bank     = ONE;
     626:	1d 82       	std	Y+5, r1	; 0x05
  ep.interval = 250;
     628:	8a ef       	ldi	r24, 0xFA	; 250
     62a:	8e 83       	std	Y+6, r24	; 0x06
  ep.sync     = NO_SYNC;
     62c:	1f 82       	std	Y+7, r1	; 0x07
  ep.iType    = DATA;
     62e:	18 86       	std	Y+8, r1	; 0x08

  usbControl.init(VID,PID,2.0,false,true,false,500);    
     630:	0f 2e       	mov	r0, r31
     632:	f4 ef       	ldi	r31, 0xF4	; 244
     634:	8f 2e       	mov	r8, r31
     636:	99 24       	eor	r9, r9
     638:	93 94       	inc	r9
     63a:	f0 2d       	mov	r31, r0
     63c:	a1 2c       	mov	r10, r1
     63e:	cc 24       	eor	r12, r12
     640:	c3 94       	inc	r12
     642:	e1 2c       	mov	r14, r1
     644:	00 e0       	ldi	r16, 0x00	; 0
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e4       	ldi	r19, 0x40	; 64
     64c:	4f ef       	ldi	r20, 0xFF	; 255
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	7f ef       	ldi	r23, 0xFF	; 255
     654:	8f e6       	ldi	r24, 0x6F	; 111
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN3USB4initEjjfbbbj>

  usbControl.initEndpoint(1,ep);
     65c:	e9 80       	ldd	r14, Y+1	; 0x01
     65e:	fa 80       	ldd	r15, Y+2	; 0x02
     660:	0b 81       	ldd	r16, Y+3	; 0x03
     662:	1c 81       	ldd	r17, Y+4	; 0x04
     664:	2d 81       	ldd	r18, Y+5	; 0x05
     666:	3e 81       	ldd	r19, Y+6	; 0x06
     668:	4f 81       	ldd	r20, Y+7	; 0x07
     66a:	58 85       	ldd	r21, Y+8	; 0x08
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	8f e6       	ldi	r24, 0x6F	; 111
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN3USB12initEndpointEh23USB_Endpoint_Definition>
  ep.size     = SIZE16;
  ep.bank     = ONE;
  ep.interval = 25;
  ep.sync     = NO_SYNC;
  ep.iType    = DATA;
  usbControl.initEndpoint(2,ep);
     676:	e9 80       	ldd	r14, Y+1	; 0x01
     678:	fa 80       	ldd	r15, Y+2	; 0x02
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	1c 81       	ldd	r17, Y+4	; 0x04
     67e:	2d 81       	ldd	r18, Y+5	; 0x05
     680:	39 e1       	ldi	r19, 0x19	; 25
     682:	4f 81       	ldd	r20, Y+7	; 0x07
     684:	58 85       	ldd	r21, Y+8	; 0x08
     686:	62 e0       	ldi	r22, 0x02	; 2
     688:	8f e6       	ldi	r24, 0x6F	; 111
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 fb 07 	call	0xff6	; 0xff6 <_ZN3USB12initEndpointEh23USB_Endpoint_Definition>

  usbControl.registerCallback(1, (functptr) &onGetStatus);
     690:	45 e1       	ldi	r20, 0x15	; 21
     692:	51 e0       	ldi	r21, 0x01	; 1
     694:	61 e0       	ldi	r22, 0x01	; 1
     696:	8f e6       	ldi	r24, 0x6F	; 111
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN3USB16registerCallbackEhPFbPvE>
  usbControl.registerCallback(2, (functptr) &onSetData);
     69e:	4d e1       	ldi	r20, 0x1D	; 29
     6a0:	51 e0       	ldi	r21, 0x01	; 1
     6a2:	62 e0       	ldi	r22, 0x02	; 2
     6a4:	8f e6       	ldi	r24, 0x6F	; 111
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN3USB16registerCallbackEhPFbPvE>
  usbControl.registerControlCallback((functCtrlptr)&onControl);
     6ac:	65 e5       	ldi	r22, 0x55	; 85
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	8f e6       	ldi	r24, 0x6F	; 111
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN3USB23registerControlCallbackEPFbPv18USB_Request_HeaderE>
}
     6b8:	28 96       	adiw	r28, 0x08	; 8
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	cf 90       	pop	r12
     6d2:	af 90       	pop	r10
     6d4:	9f 90       	pop	r9
     6d6:	8f 90       	pop	r8
     6d8:	08 95       	ret

000006da <_Z4initv>:

void init(){
  DDRB    = 0xFF;
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	84 b9       	out	0x04, r24	; 4
  DDRC    = 0xFF;
     6de:	87 b9       	out	0x07, r24	; 7
  DDRD    = 0b01100000;
     6e0:	90 e6       	ldi	r25, 0x60	; 96
     6e2:	9a b9       	out	0x0a, r25	; 10
  DDRF    = 0xFF;
     6e4:	80 bb       	out	0x10, r24	; 16

  TCCR0A  = 0b00000010;
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	84 bd       	out	0x24, r24	; 36
  TCCR0B  = 0; 
     6ea:	15 bc       	out	0x25, r1	; 37
  TCCR1A  = 0;
     6ec:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR1B  = 1; 
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

  OCR0A   = 130;
     6f6:	82 e8       	ldi	r24, 0x82	; 130
     6f8:	87 bd       	out	0x27, r24	; 39
  OCR0B   = 65;  
     6fa:	81 e4       	ldi	r24, 0x41	; 65
     6fc:	88 bd       	out	0x28, r24	; 40
  TCNT0   = 0x0;  
     6fe:	16 bc       	out	0x26, r1	; 38

  TIMSK0  |= (1<<OCIE0A) | (1<<OCIE0B);  
     700:	ee e6       	ldi	r30, 0x6E	; 110
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	86 60       	ori	r24, 0x06	; 6
     708:	80 83       	st	Z, r24
  TIMSK1  |= (1<<TOIE1);
     70a:	ef e6       	ldi	r30, 0x6F	; 111
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	81 60       	ori	r24, 0x01	; 1
     712:	80 83       	st	Z, r24

  ledCtrl.addPin(0,&ledA);
     714:	42 e2       	ldi	r20, 0x22	; 34
     716:	51 e0       	ldi	r21, 0x01	; 1
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	8f e0       	ldi	r24, 0x0F	; 15
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN10ledControl6addPinEhP5pinIO>
  ledCtrl.addPin(1,&ledB);
     722:	4f e1       	ldi	r20, 0x1F	; 31
     724:	51 e0       	ldi	r21, 0x01	; 1
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	8f e0       	ldi	r24, 0x0F	; 15
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN10ledControl6addPinEhP5pinIO>
     730:	08 95       	ret

00000732 <_Z15initStepControlv>:
  
}

void initStepControl(){
  stepControl.init();
     732:	81 e5       	ldi	r24, 0x51	; 81
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 65 04 	call	0x8ca	; 0x8ca <_ZN11StepControl4initEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73a:	2f ef       	ldi	r18, 0xFF	; 255
     73c:	80 e7       	ldi	r24, 0x70	; 112
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	21 50       	subi	r18, 0x01	; 1
     742:	80 40       	sbci	r24, 0x00	; 0
     744:	90 40       	sbci	r25, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <_Z15initStepControlv+0xe>
     748:	00 c0       	rjmp	.+0      	; 0x74a <_Z15initStepControlv+0x18>
     74a:	00 00       	nop
  _delay_ms(50);
  ENABLE;
     74c:	47 9a       	sbi	0x08, 7	; 8
  TIMER_STEP_START;  
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	85 bd       	out	0x25, r24	; 37
     752:	08 95       	ret

00000754 <main>:
  status.status       = (isFault << 3) | (isError << 2) | (isWork<<1) | (isInit);
}

int main(void) {

  init();
     754:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4initv>
  initUSB();  
     758:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_Z7initUSBv>

  while(!usbControl.isEnumerate()){
     75c:	09 c0       	rjmp	.+18     	; 0x770 <main+0x1c>
    ledCtrl.blink(0b11,150,150);
     75e:	26 e9       	ldi	r18, 0x96	; 150
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	46 e9       	ldi	r20, 0x96	; 150
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	63 e0       	ldi	r22, 0x03	; 3
     768:	8f e0       	ldi	r24, 0x0F	; 15
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 98 00 	call	0x130	; 0x130 <_ZN10ledControl5blinkEhjj>
int main(void) {

  init();
  initUSB();  

  while(!usbControl.isEnumerate()){
     770:	8f e6       	ldi	r24, 0x6F	; 111
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN3USB11isEnumerateEv>
     778:	88 23       	and	r24, r24
     77a:	89 f3       	breq	.-30     	; 0x75e <main+0xa>
    ledCtrl.blink(0b11,150,150);
  }

  initStepControl();
     77c:	0e 94 99 03 	call	0x732	; 0x732 <_Z15initStepControlv>
  
  while (1) {
    isFault = ((stepControl.getInputs() & 0b111) != 0);
     780:	01 e0       	ldi	r16, 0x01	; 1
     782:	f1 2c       	mov	r15, r1

    if( isStartInit ){
      isStartInit = false;
      isInit = stepControl.initialize();
      TIMER_STEP_STOP;
      TIMER_STEP_START;
     784:	d2 e0       	ldi	r29, 0x02	; 2
      isFault = !isInit;  
    }

    while( isFault ){
      isFault = (stepControl.getInputs() != 0);
     786:	c0 2f       	mov	r28, r16
     788:	1f 2d       	mov	r17, r15
  }

  initStepControl();
  
  while (1) {
    isFault = ((stepControl.getInputs() & 0b111) != 0);
     78a:	81 e5       	ldi	r24, 0x51	; 81
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN11StepControl9getInputsEv>
     792:	87 70       	andi	r24, 0x07	; 7
     794:	90 2f       	mov	r25, r16
     796:	09 f4       	brne	.+2      	; 0x79a <main+0x46>
     798:	9f 2d       	mov	r25, r15
     79a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <isFault>

    if( isStartInit ){
     79e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     7a2:	88 23       	and	r24, r24
     7a4:	99 f1       	breq	.+102    	; 0x80c <main+0xb8>
      isStartInit = false;
     7a6:	f0 92 06 01 	sts	0x0106, r15	; 0x800106 <__data_end>
      isInit = stepControl.initialize();
     7aa:	81 e5       	ldi	r24, 0x51	; 81
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 73 07 	call	0xee6	; 0xee6 <_ZN11StepControl10initializeEv>
     7b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <isInit>
      TIMER_STEP_STOP;
     7b6:	15 bc       	out	0x25, r1	; 37
      TIMER_STEP_START;
     7b8:	d5 bd       	out	0x25, r29	; 37
      isFault = !isInit;  
     7ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <isInit>
     7be:	80 27       	eor	r24, r16
     7c0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <isFault>
     7c4:	23 c0       	rjmp	.+70     	; 0x80c <main+0xb8>
    }

    while( isFault ){
      isFault = (stepControl.getInputs() != 0);
     7c6:	81 e5       	ldi	r24, 0x51	; 81
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN11StepControl9getInputsEv>
     7ce:	9c 2f       	mov	r25, r28
     7d0:	81 11       	cpse	r24, r1
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <main+0x82>
     7d4:	91 2f       	mov	r25, r17
     7d6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <isFault>
      ledCtrl.blink(0b01,500,500);
     7da:	24 ef       	ldi	r18, 0xF4	; 244
     7dc:	31 e0       	ldi	r19, 0x01	; 1
     7de:	44 ef       	ldi	r20, 0xF4	; 244
     7e0:	51 e0       	ldi	r21, 0x01	; 1
     7e2:	6c 2f       	mov	r22, r28
     7e4:	8f e0       	ldi	r24, 0x0F	; 15
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 98 00 	call	0x130	; 0x130 <_ZN10ledControl5blinkEhjj>
      ledCtrl.blink(0b11,500,500);
     7ec:	24 ef       	ldi	r18, 0xF4	; 244
     7ee:	31 e0       	ldi	r19, 0x01	; 1
     7f0:	44 ef       	ldi	r20, 0xF4	; 244
     7f2:	51 e0       	ldi	r21, 0x01	; 1
     7f4:	63 e0       	ldi	r22, 0x03	; 3
     7f6:	8f e0       	ldi	r24, 0x0F	; 15
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 98 00 	call	0x130	; 0x130 <_ZN10ledControl5blinkEhjj>
      if( isFault ) {
     7fe:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <isFault>
     802:	88 23       	and	r24, r24
     804:	11 f0       	breq	.+4      	; 0x80a <main+0xb6>
        TIMER_STEP_STOP;
     806:	15 bc       	out	0x25, r1	; 37
     808:	01 c0       	rjmp	.+2      	; 0x80c <main+0xb8>
      } else {
        TIMER_STEP_START;
     80a:	d5 bd       	out	0x25, r29	; 37
      TIMER_STEP_STOP;
      TIMER_STEP_START;
      isFault = !isInit;  
    }

    while( isFault ){
     80c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <isFault>
     810:	81 11       	cpse	r24, r1
     812:	d9 cf       	rjmp	.-78     	; 0x7c6 <main+0x72>
      } else {
        TIMER_STEP_START;
      }
    }

    ledCtrl.blink(0b11,350,350);
     814:	2e e5       	ldi	r18, 0x5E	; 94
     816:	31 e0       	ldi	r19, 0x01	; 1
     818:	4e e5       	ldi	r20, 0x5E	; 94
     81a:	51 e0       	ldi	r21, 0x01	; 1
     81c:	63 e0       	ldi	r22, 0x03	; 3
     81e:	8f e0       	ldi	r24, 0x0F	; 15
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 98 00 	call	0x130	; 0x130 <_ZN10ledControl5blinkEhjj>
  status.point.coils  = stepControl.getCoils();
  status.inputs       = stepControl.getInputs();
  status.status       = (isFault << 3) | (isError << 2) | (isWork<<1) | (isInit);
}

int main(void) {
     826:	b1 cf       	rjmp	.-158    	; 0x78a <main+0x36>

00000828 <_GLOBAL__sub_I_usbControl>:
{

public:

    RingBufferT()
        : mSize( SIZE ), mLength( 0 ), mIndex( 0 )
     828:	e9 e3       	ldi	r30, 0x39	; 57
     82a:	f1 e0       	ldi	r31, 0x01	; 1
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	85 8b       	std	Z+21, r24	; 0x15
     830:	16 8a       	std	Z+22, r1	; 0x16
     832:	17 8a       	std	Z+23, r1	; 0x17
volatile DEVICE_POINT dp;
volatile int16_t dZeroA = 1000;
volatile int16_t dZeroB = 1000;
volatile int16_t dZeroC = 1000;

pinIO ledA(&PORTD,PIND5);
     834:	45 e0       	ldi	r20, 0x05	; 5
     836:	6b e2       	ldi	r22, 0x2B	; 43
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	82 e2       	ldi	r24, 0x22	; 34
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 29 04 	call	0x852	; 0x852 <_ZN5pinIOC1EPVhh>
pinIO ledB(&PORTB,PINB0);
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	65 e2       	ldi	r22, 0x25	; 37
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	8f e1       	ldi	r24, 0x1F	; 31
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 29 04 	call	0x852	; 0x852 <_ZN5pinIOC1EPVhh>
     850:	08 95       	ret

00000852 <_ZN5pinIOC1EPVhh>:
#include "pincontrol.h"

pinIO::pinIO(volatile uint8_t* PORT, uint8_t PIN){
  this->port = PORT;
     852:	fc 01       	movw	r30, r24
     854:	71 83       	std	Z+1, r23	; 0x01
     856:	60 83       	st	Z, r22
  this->pin  = PIN;
     858:	42 83       	std	Z+2, r20	; 0x02
     85a:	08 95       	ret

0000085c <_ZN5pinIO3SetEv>:
}

void pinIO::Set(){
  *port |= (1<<pin);
     85c:	dc 01       	movw	r26, r24
     85e:	12 96       	adiw	r26, 0x02	; 2
     860:	3c 91       	ld	r19, X
     862:	12 97       	sbiw	r26, 0x02	; 2
     864:	ed 91       	ld	r30, X+
     866:	fc 91       	ld	r31, X
     868:	20 81       	ld	r18, Z
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	02 c0       	rjmp	.+4      	; 0x874 <_ZN5pinIO3SetEv+0x18>
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	3a 95       	dec	r19
     876:	e2 f7       	brpl	.-8      	; 0x870 <_ZN5pinIO3SetEv+0x14>
     878:	82 2b       	or	r24, r18
     87a:	80 83       	st	Z, r24
     87c:	08 95       	ret

0000087e <_ZN5pinIO3ClrEv>:
}

void pinIO::Clr(){
  *port &= ~(1<<pin);
     87e:	dc 01       	movw	r26, r24
     880:	12 96       	adiw	r26, 0x02	; 2
     882:	3c 91       	ld	r19, X
     884:	12 97       	sbiw	r26, 0x02	; 2
     886:	ed 91       	ld	r30, X+
     888:	fc 91       	ld	r31, X
     88a:	20 81       	ld	r18, Z
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	02 c0       	rjmp	.+4      	; 0x896 <_ZN5pinIO3ClrEv+0x18>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	3a 95       	dec	r19
     898:	e2 f7       	brpl	.-8      	; 0x892 <_ZN5pinIO3ClrEv+0x14>
     89a:	80 95       	com	r24
     89c:	90 95       	com	r25
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	82 23       	and	r24, r18
     8a2:	93 23       	and	r25, r19
     8a4:	80 83       	st	Z, r24
     8a6:	08 95       	ret

000008a8 <_ZN5pinIO6ToggleEv>:
}

void pinIO::Toggle(){
  *port ^= (1<<pin);  
     8a8:	dc 01       	movw	r26, r24
     8aa:	12 96       	adiw	r26, 0x02	; 2
     8ac:	3c 91       	ld	r19, X
     8ae:	12 97       	sbiw	r26, 0x02	; 2
     8b0:	ed 91       	ld	r30, X+
     8b2:	fc 91       	ld	r31, X
     8b4:	20 81       	ld	r18, Z
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <_ZN5pinIO6ToggleEv+0x18>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	3a 95       	dec	r19
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <_ZN5pinIO6ToggleEv+0x14>
     8c4:	82 27       	eor	r24, r18
     8c6:	80 83       	st	Z, r24
     8c8:	08 95       	ret

000008ca <_ZN11StepControl4initEv>:
 */ 
#include <avr/interrupt.h>
#include <stdlib.h>
#include "stepControl.h"

void StepControl::init(){  
     8ca:	fc 01       	movw	r30, r24
  posA = posB = posC = 0;
     8cc:	15 82       	std	Z+5, r1	; 0x05
     8ce:	14 82       	std	Z+4, r1	; 0x04
     8d0:	13 82       	std	Z+3, r1	; 0x03
     8d2:	12 82       	std	Z+2, r1	; 0x02
     8d4:	11 82       	std	Z+1, r1	; 0x01
     8d6:	10 82       	st	Z, r1
  setA = setB = setC = newA = newB = newC = 0;  
     8d8:	13 86       	std	Z+11, r1	; 0x0b
     8da:	12 86       	std	Z+10, r1	; 0x0a
     8dc:	11 86       	std	Z+9, r1	; 0x09
     8de:	10 86       	std	Z+8, r1	; 0x08
     8e0:	17 82       	std	Z+7, r1	; 0x07
     8e2:	16 82       	std	Z+6, r1	; 0x06
     8e4:	17 8a       	std	Z+23, r1	; 0x17
     8e6:	16 8a       	std	Z+22, r1	; 0x16
     8e8:	15 8a       	std	Z+21, r1	; 0x15
     8ea:	14 8a       	std	Z+20, r1	; 0x14
     8ec:	13 8a       	std	Z+19, r1	; 0x13
     8ee:	12 8a       	std	Z+18, r1	; 0x12
     8f0:	08 95       	ret

000008f2 <_ZN11StepControl6isDoneEv>:
}

bool StepControl::isDone(){
  return this->isOnPoint;
}
     8f2:	fc 01       	movw	r30, r24
     8f4:	85 8d       	ldd	r24, Z+29	; 0x1d
     8f6:	08 95       	ret

000008f8 <_ZN11StepControl8setCoilsEv>:

void StepControl::setCoils(){
  uint8_t mask = PORTB & (0b00010000);
     8f8:	25 b1       	in	r18, 0x05	; 5
     8fa:	20 71       	andi	r18, 0x10	; 16
  mask |= (this->nowCoils&(1<<3))?0x80:0;
     8fc:	fc 01       	movw	r30, r24
     8fe:	81 8d       	ldd	r24, Z+25	; 0x19
     900:	83 fd       	sbrc	r24, 3
     902:	02 c0       	rjmp	.+4      	; 0x908 <_ZN11StepControl8setCoilsEv+0x10>
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	01 c0       	rjmp	.+2      	; 0x90a <_ZN11StepControl8setCoilsEv+0x12>
     908:	90 e8       	ldi	r25, 0x80	; 128
     90a:	29 2b       	or	r18, r25
  mask |= (this->nowCoils&(1<<2))?0x60:0;
     90c:	82 fd       	sbrc	r24, 2
     90e:	02 c0       	rjmp	.+4      	; 0x914 <_ZN11StepControl8setCoilsEv+0x1c>
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	01 c0       	rjmp	.+2      	; 0x916 <_ZN11StepControl8setCoilsEv+0x1e>
     914:	90 e6       	ldi	r25, 0x60	; 96
     916:	29 2b       	or	r18, r25
  mask |= (this->nowCoils&(1<<1))?0x40:0;
     918:	81 fd       	sbrc	r24, 1
     91a:	02 c0       	rjmp	.+4      	; 0x920 <_ZN11StepControl8setCoilsEv+0x28>
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	01 c0       	rjmp	.+2      	; 0x922 <_ZN11StepControl8setCoilsEv+0x2a>
     920:	90 e4       	ldi	r25, 0x40	; 64
     922:	29 2b       	or	r18, r25
  mask |= (this->nowCoils&(1<<0))?0x10:0;
     924:	80 fd       	sbrc	r24, 0
     926:	02 c0       	rjmp	.+4      	; 0x92c <_ZN11StepControl8setCoilsEv+0x34>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	01 c0       	rjmp	.+2      	; 0x92e <_ZN11StepControl8setCoilsEv+0x36>
     92c:	80 e1       	ldi	r24, 0x10	; 16
     92e:	28 2b       	or	r18, r24
  PORTB = mask;
     930:	25 b9       	out	0x05, r18	; 5
     932:	08 95       	ret

00000934 <_ZN11StepControl7getPosAEv>:
}

int16_t StepControl::getPosA(){
  return (this->posA >> 1);
     934:	fc 01       	movw	r30, r24
     936:	80 81       	ld	r24, Z
     938:	91 81       	ldd	r25, Z+1	; 0x01
}
     93a:	95 95       	asr	r25
     93c:	87 95       	ror	r24
     93e:	08 95       	ret

00000940 <_ZN11StepControl7getPosBEv>:

int16_t StepControl::getPosB(){
  return (this->posB >> 1);
     940:	fc 01       	movw	r30, r24
     942:	82 81       	ldd	r24, Z+2	; 0x02
     944:	93 81       	ldd	r25, Z+3	; 0x03
}
     946:	95 95       	asr	r25
     948:	87 95       	ror	r24
     94a:	08 95       	ret

0000094c <_ZN11StepControl7getPosCEv>:

int16_t StepControl::getPosC(){
  return (this->posC >> 1);
     94c:	fc 01       	movw	r30, r24
     94e:	84 81       	ldd	r24, Z+4	; 0x04
     950:	95 81       	ldd	r25, Z+5	; 0x05
}
     952:	95 95       	asr	r25
     954:	87 95       	ror	r24
     956:	08 95       	ret

00000958 <_ZN11StepControl8getCoilsEv>:

uint8_t StepControl::getCoils(){
  return this->nowCoils;
}
     958:	fc 01       	movw	r30, r24
     95a:	81 8d       	ldd	r24, Z+25	; 0x19
     95c:	08 95       	ret

0000095e <_ZN11StepControl12proclaimPoisEhi>:

void StepControl::proclaimPois(uint8_t num, int16_t pos){
  if( num == 0 ){
     95e:	61 11       	cpse	r22, r1
     960:	08 c0       	rjmp	.+16     	; 0x972 <_ZN11StepControl12proclaimPoisEhi+0x14>
    this->posA = this->newA = pos*2;
     962:	44 0f       	add	r20, r20
     964:	55 1f       	adc	r21, r21
     966:	fc 01       	movw	r30, r24
     968:	57 83       	std	Z+7, r21	; 0x07
     96a:	46 83       	std	Z+6, r20	; 0x06
     96c:	51 83       	std	Z+1, r21	; 0x01
     96e:	40 83       	st	Z, r20
     970:	08 95       	ret
  } else if( num == 1 ){
     972:	61 30       	cpi	r22, 0x01	; 1
     974:	41 f4       	brne	.+16     	; 0x986 <_ZN11StepControl12proclaimPoisEhi+0x28>
    this->posB = this->newB = pos*2;
     976:	44 0f       	add	r20, r20
     978:	55 1f       	adc	r21, r21
     97a:	fc 01       	movw	r30, r24
     97c:	51 87       	std	Z+9, r21	; 0x09
     97e:	40 87       	std	Z+8, r20	; 0x08
     980:	53 83       	std	Z+3, r21	; 0x03
     982:	42 83       	std	Z+2, r20	; 0x02
     984:	08 95       	ret
  } else if( num == 2){
     986:	62 30       	cpi	r22, 0x02	; 2
     988:	39 f4       	brne	.+14     	; 0x998 <_ZN11StepControl12proclaimPoisEhi+0x3a>
    this->posC = this-> newC= pos*2;
     98a:	44 0f       	add	r20, r20
     98c:	55 1f       	adc	r21, r21
     98e:	fc 01       	movw	r30, r24
     990:	53 87       	std	Z+11, r21	; 0x0b
     992:	42 87       	std	Z+10, r20	; 0x0a
     994:	55 83       	std	Z+5, r21	; 0x05
     996:	44 83       	std	Z+4, r20	; 0x04
     998:	08 95       	ret

0000099a <_ZN11StepControl4goToEiiih>:
  }
}

uint8_t StepControl::goTo(int16_t A, int16_t B, int16_t C, uint8_t coils){    
     99a:	2f 92       	push	r2
     99c:	3f 92       	push	r3
     99e:	4f 92       	push	r4
     9a0:	5f 92       	push	r5
     9a2:	6f 92       	push	r6
     9a4:	7f 92       	push	r7
     9a6:	8f 92       	push	r8
     9a8:	9f 92       	push	r9
     9aa:	af 92       	push	r10
     9ac:	bf 92       	push	r11
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	2c 97       	sbiw	r28, 0x0c	; 12
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	2c 01       	movw	r4, r24
  const float fMax = 200.0f;
  float a,b,c;
  uint8_t mask = PORTF & 0b11101100;
     9d0:	11 b3       	in	r17, 0x11	; 17
     9d2:	1c 7e       	andi	r17, 0xEC	; 236

  newA = A*2;
     9d4:	1b 01       	movw	r2, r22
     9d6:	22 0c       	add	r2, r2
     9d8:	33 1c       	adc	r3, r3
     9da:	dc 01       	movw	r26, r24
     9dc:	17 96       	adiw	r26, 0x07	; 7
     9de:	3c 92       	st	X, r3
     9e0:	2e 92       	st	-X, r2
     9e2:	16 97       	sbiw	r26, 0x06	; 6
  newB = B*2;
     9e4:	4a 01       	movw	r8, r20
     9e6:	88 0c       	add	r8, r8
     9e8:	99 1c       	adc	r9, r9
     9ea:	19 96       	adiw	r26, 0x09	; 9
     9ec:	9c 92       	st	X, r9
     9ee:	8e 92       	st	-X, r8
     9f0:	18 97       	sbiw	r26, 0x08	; 8
  newC = C*2;
     9f2:	69 01       	movw	r12, r18
     9f4:	cc 0c       	add	r12, r12
     9f6:	dd 1c       	adc	r13, r13
     9f8:	1b 96       	adiw	r26, 0x0b	; 11
     9fa:	dc 92       	st	X, r13
     9fc:	ce 92       	st	-X, r12
     9fe:	1a 97       	sbiw	r26, 0x0a	; 10

  a = abs(posA - newA);
     a00:	6d 90       	ld	r6, X+
     a02:	7c 90       	ld	r7, X
     a04:	c3 01       	movw	r24, r6
     a06:	82 19       	sub	r24, r2
     a08:	93 09       	sbc	r25, r3
     a0a:	bc 01       	movw	r22, r24
     a0c:	22 f4       	brpl	.+8      	; 0xa16 <_ZN11StepControl4goToEiiih+0x7c>
     a0e:	66 27       	eor	r22, r22
     a10:	77 27       	eor	r23, r23
     a12:	68 1b       	sub	r22, r24
     a14:	79 0b       	sbc	r23, r25
     a16:	07 2e       	mov	r0, r23
     a18:	00 0c       	add	r0, r0
     a1a:	88 0b       	sbc	r24, r24
     a1c:	99 0b       	sbc	r25, r25
     a1e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__floatsisf>
     a22:	69 83       	std	Y+1, r22	; 0x01
     a24:	7a 83       	std	Y+2, r23	; 0x02
     a26:	8b 83       	std	Y+3, r24	; 0x03
     a28:	9c 83       	std	Y+4, r25	; 0x04
  b = abs(posB - newB);
     a2a:	f2 01       	movw	r30, r4
     a2c:	a2 80       	ldd	r10, Z+2	; 0x02
     a2e:	b3 80       	ldd	r11, Z+3	; 0x03
     a30:	c5 01       	movw	r24, r10
     a32:	88 19       	sub	r24, r8
     a34:	99 09       	sbc	r25, r9
     a36:	bc 01       	movw	r22, r24
     a38:	22 f4       	brpl	.+8      	; 0xa42 <_ZN11StepControl4goToEiiih+0xa8>
     a3a:	66 27       	eor	r22, r22
     a3c:	77 27       	eor	r23, r23
     a3e:	68 1b       	sub	r22, r24
     a40:	79 0b       	sbc	r23, r25
     a42:	07 2e       	mov	r0, r23
     a44:	00 0c       	add	r0, r0
     a46:	88 0b       	sbc	r24, r24
     a48:	99 0b       	sbc	r25, r25
     a4a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__floatsisf>
     a4e:	6d 83       	std	Y+5, r22	; 0x05
     a50:	7e 83       	std	Y+6, r23	; 0x06
     a52:	8f 83       	std	Y+7, r24	; 0x07
     a54:	98 87       	std	Y+8, r25	; 0x08
  c = abs(posC - newC);
     a56:	d2 01       	movw	r26, r4
     a58:	14 96       	adiw	r26, 0x04	; 4
     a5a:	ed 90       	ld	r14, X+
     a5c:	fc 90       	ld	r15, X
     a5e:	15 97       	sbiw	r26, 0x05	; 5
     a60:	c7 01       	movw	r24, r14
     a62:	8c 19       	sub	r24, r12
     a64:	9d 09       	sbc	r25, r13
     a66:	bc 01       	movw	r22, r24
     a68:	22 f4       	brpl	.+8      	; 0xa72 <_ZN11StepControl4goToEiiih+0xd8>
     a6a:	66 27       	eor	r22, r22
     a6c:	77 27       	eor	r23, r23
     a6e:	68 1b       	sub	r22, r24
     a70:	79 0b       	sbc	r23, r25
     a72:	07 2e       	mov	r0, r23
     a74:	00 0c       	add	r0, r0
     a76:	88 0b       	sbc	r24, r24
     a78:	99 0b       	sbc	r25, r25
     a7a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__floatsisf>
     a7e:	69 87       	std	Y+9, r22	; 0x09
     a80:	7a 87       	std	Y+10, r23	; 0x0a
     a82:	8b 87       	std	Y+11, r24	; 0x0b
     a84:	9c 87       	std	Y+12, r25	; 0x0c
  if( (a > fMax)||(a == 0) ) a = fMax;
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	48 e4       	ldi	r20, 0x48	; 72
     a8c:	53 e4       	ldi	r21, 0x43	; 67
     a8e:	69 81       	ldd	r22, Y+1	; 0x01
     a90:	7a 81       	ldd	r23, Y+2	; 0x02
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	9c 81       	ldd	r25, Y+4	; 0x04
     a96:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__gesf2>
     a9a:	18 16       	cp	r1, r24
     a9c:	a4 f0       	brlt	.+40     	; 0xac6 <_ZN11StepControl4goToEiiih+0x12c>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	a9 01       	movw	r20, r18
     aa4:	69 81       	ldd	r22, Y+1	; 0x01
     aa6:	7a 81       	ldd	r23, Y+2	; 0x02
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__cmpsf2>
     ab0:	81 11       	cpse	r24, r1
     ab2:	11 c0       	rjmp	.+34     	; 0xad6 <_ZN11StepControl4goToEiiih+0x13c>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a8 e4       	ldi	r26, 0x48	; 72
     aba:	b3 e4       	ldi	r27, 0x43	; 67
     abc:	89 83       	std	Y+1, r24	; 0x01
     abe:	9a 83       	std	Y+2, r25	; 0x02
     ac0:	ab 83       	std	Y+3, r26	; 0x03
     ac2:	bc 83       	std	Y+4, r27	; 0x04
     ac4:	08 c0       	rjmp	.+16     	; 0xad6 <_ZN11StepControl4goToEiiih+0x13c>
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	a8 e4       	ldi	r26, 0x48	; 72
     acc:	b3 e4       	ldi	r27, 0x43	; 67
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	9a 83       	std	Y+2, r25	; 0x02
     ad2:	ab 83       	std	Y+3, r26	; 0x03
     ad4:	bc 83       	std	Y+4, r27	; 0x04
  if( (b > fMax)||(b == 0) ) b = fMax;
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	48 e4       	ldi	r20, 0x48	; 72
     adc:	53 e4       	ldi	r21, 0x43	; 67
     ade:	6d 81       	ldd	r22, Y+5	; 0x05
     ae0:	7e 81       	ldd	r23, Y+6	; 0x06
     ae2:	8f 81       	ldd	r24, Y+7	; 0x07
     ae4:	98 85       	ldd	r25, Y+8	; 0x08
     ae6:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__gesf2>
     aea:	18 16       	cp	r1, r24
     aec:	a4 f0       	brlt	.+40     	; 0xb16 <__stack+0x17>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	a9 01       	movw	r20, r18
     af4:	6d 81       	ldd	r22, Y+5	; 0x05
     af6:	7e 81       	ldd	r23, Y+6	; 0x06
     af8:	8f 81       	ldd	r24, Y+7	; 0x07
     afa:	98 85       	ldd	r25, Y+8	; 0x08
     afc:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__cmpsf2>
     b00:	81 11       	cpse	r24, r1
     b02:	11 c0       	rjmp	.+34     	; 0xb26 <__stack+0x27>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	a8 e4       	ldi	r26, 0x48	; 72
     b0a:	b3 e4       	ldi	r27, 0x43	; 67
     b0c:	8d 83       	std	Y+5, r24	; 0x05
     b0e:	9e 83       	std	Y+6, r25	; 0x06
     b10:	af 83       	std	Y+7, r26	; 0x07
     b12:	b8 87       	std	Y+8, r27	; 0x08
     b14:	08 c0       	rjmp	.+16     	; 0xb26 <__stack+0x27>
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	a8 e4       	ldi	r26, 0x48	; 72
     b1c:	b3 e4       	ldi	r27, 0x43	; 67
     b1e:	8d 83       	std	Y+5, r24	; 0x05
     b20:	9e 83       	std	Y+6, r25	; 0x06
     b22:	af 83       	std	Y+7, r26	; 0x07
     b24:	b8 87       	std	Y+8, r27	; 0x08
  if( (c > fMax)||(c == 0) ) c = fMax;
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	48 e4       	ldi	r20, 0x48	; 72
     b2c:	53 e4       	ldi	r21, 0x43	; 67
     b2e:	69 85       	ldd	r22, Y+9	; 0x09
     b30:	7a 85       	ldd	r23, Y+10	; 0x0a
     b32:	8b 85       	ldd	r24, Y+11	; 0x0b
     b34:	9c 85       	ldd	r25, Y+12	; 0x0c
     b36:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__gesf2>
     b3a:	18 16       	cp	r1, r24
     b3c:	a4 f0       	brlt	.+40     	; 0xb66 <__stack+0x67>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	a9 01       	movw	r20, r18
     b44:	69 85       	ldd	r22, Y+9	; 0x09
     b46:	7a 85       	ldd	r23, Y+10	; 0x0a
     b48:	8b 85       	ldd	r24, Y+11	; 0x0b
     b4a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b4c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__cmpsf2>
     b50:	81 11       	cpse	r24, r1
     b52:	11 c0       	rjmp	.+34     	; 0xb76 <__stack+0x77>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a8 e4       	ldi	r26, 0x48	; 72
     b5a:	b3 e4       	ldi	r27, 0x43	; 67
     b5c:	89 87       	std	Y+9, r24	; 0x09
     b5e:	9a 87       	std	Y+10, r25	; 0x0a
     b60:	ab 87       	std	Y+11, r26	; 0x0b
     b62:	bc 87       	std	Y+12, r27	; 0x0c
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <__stack+0x77>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a8 e4       	ldi	r26, 0x48	; 72
     b6c:	b3 e4       	ldi	r27, 0x43	; 67
     b6e:	89 87       	std	Y+9, r24	; 0x09
     b70:	9a 87       	std	Y+10, r25	; 0x0a
     b72:	ab 87       	std	Y+11, r26	; 0x0b
     b74:	bc 87       	std	Y+12, r27	; 0x0c

    
  cntA = setA = 5 + (fMax / a);
     b76:	29 81       	ldd	r18, Y+1	; 0x01
     b78:	3a 81       	ldd	r19, Y+2	; 0x02
     b7a:	4b 81       	ldd	r20, Y+3	; 0x03
     b7c:	5c 81       	ldd	r21, Y+4	; 0x04
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	88 e4       	ldi	r24, 0x48	; 72
     b84:	93 e4       	ldi	r25, 0x43	; 67
     b86:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divsf3>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 ea       	ldi	r20, 0xA0	; 160
     b90:	50 e4       	ldi	r21, 0x40	; 64
     b92:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__addsf3>
     b96:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
     b9a:	d2 01       	movw	r26, r4
     b9c:	53 96       	adiw	r26, 0x13	; 19
     b9e:	7c 93       	st	X, r23
     ba0:	6e 93       	st	-X, r22
     ba2:	52 97       	sbiw	r26, 0x12	; 18
     ba4:	1d 96       	adiw	r26, 0x0d	; 13
     ba6:	7c 93       	st	X, r23
     ba8:	6e 93       	st	-X, r22
     baa:	1c 97       	sbiw	r26, 0x0c	; 12
  cntB = setB = 5 + (fMax / b);
     bac:	2d 81       	ldd	r18, Y+5	; 0x05
     bae:	3e 81       	ldd	r19, Y+6	; 0x06
     bb0:	4f 81       	ldd	r20, Y+7	; 0x07
     bb2:	58 85       	ldd	r21, Y+8	; 0x08
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	88 e4       	ldi	r24, 0x48	; 72
     bba:	93 e4       	ldi	r25, 0x43	; 67
     bbc:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divsf3>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 ea       	ldi	r20, 0xA0	; 160
     bc6:	50 e4       	ldi	r21, 0x40	; 64
     bc8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__addsf3>
     bcc:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
     bd0:	f2 01       	movw	r30, r4
     bd2:	75 8b       	std	Z+21, r23	; 0x15
     bd4:	64 8b       	std	Z+20, r22	; 0x14
     bd6:	77 87       	std	Z+15, r23	; 0x0f
     bd8:	66 87       	std	Z+14, r22	; 0x0e
  cntC = setC = 5 + (fMax / c);
     bda:	29 85       	ldd	r18, Y+9	; 0x09
     bdc:	3a 85       	ldd	r19, Y+10	; 0x0a
     bde:	4b 85       	ldd	r20, Y+11	; 0x0b
     be0:	5c 85       	ldd	r21, Y+12	; 0x0c
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	88 e4       	ldi	r24, 0x48	; 72
     be8:	93 e4       	ldi	r25, 0x43	; 67
     bea:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 ea       	ldi	r20, 0xA0	; 160
     bf4:	50 e4       	ldi	r21, 0x40	; 64
     bf6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__addsf3>
     bfa:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
     bfe:	d2 01       	movw	r26, r4
     c00:	57 96       	adiw	r26, 0x17	; 23
     c02:	7c 93       	st	X, r23
     c04:	6e 93       	st	-X, r22
     c06:	56 97       	sbiw	r26, 0x16	; 22
     c08:	51 96       	adiw	r26, 0x11	; 17
     c0a:	7c 93       	st	X, r23
     c0c:	6e 93       	st	-X, r22
     c0e:	50 97       	sbiw	r26, 0x10	; 16
    
  dirA = (posA <= newA) ? 1 : -1;
     c10:	26 14       	cp	r2, r6
     c12:	37 04       	cpc	r3, r7
     c14:	14 f4       	brge	.+4      	; 0xc1a <__stack+0x11b>
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <__stack+0x11d>
     c1a:	21 e0       	ldi	r18, 0x01	; 1
     c1c:	f2 01       	movw	r30, r4
     c1e:	22 8f       	std	Z+26, r18	; 0x1a
  dirB = (posB <= newB) ? 1 : -1;
     c20:	8a 14       	cp	r8, r10
     c22:	9b 04       	cpc	r9, r11
     c24:	14 f4       	brge	.+4      	; 0xc2a <__stack+0x12b>
     c26:	9f ef       	ldi	r25, 0xFF	; 255
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <__stack+0x12d>
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	d2 01       	movw	r26, r4
     c2e:	5b 96       	adiw	r26, 0x1b	; 27
     c30:	9c 93       	st	X, r25
  dirC = (posC <= newC) ? 1 : -1;
     c32:	ce 14       	cp	r12, r14
     c34:	df 04       	cpc	r13, r15
     c36:	14 f4       	brge	.+4      	; 0xc3c <__stack+0x13d>
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <__stack+0x13f>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	f2 01       	movw	r30, r4
     c40:	84 8f       	std	Z+28, r24	; 0x1c

  if( dirA > 0){
     c42:	12 16       	cp	r1, r18
     c44:	0c f4       	brge	.+2      	; 0xc48 <__stack+0x149>
    mask |= (1<<0);
     c46:	11 60       	ori	r17, 0x01	; 1
  }
  if( dirB > 0){
     c48:	19 16       	cp	r1, r25
     c4a:	0c f4       	brge	.+2      	; 0xc4e <__stack+0x14f>
    mask |= (1<<1);
     c4c:	12 60       	ori	r17, 0x02	; 2
  }
  if( dirC > 0){
     c4e:	18 16       	cp	r1, r24
     c50:	0c f4       	brge	.+2      	; 0xc54 <__stack+0x155>
    mask |= (1<<4);
     c52:	10 61       	ori	r17, 0x10	; 16
  }

  PORTF = mask;
     c54:	11 bb       	out	0x11, r17	; 17
  
  nowCoils = coils;
     c56:	d2 01       	movw	r26, r4
     c58:	59 96       	adiw	r26, 0x19	; 25
     c5a:	0c 93       	st	X, r16
  setCoils();  
     c5c:	c2 01       	movw	r24, r4
     c5e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_ZN11StepControl8setCoilsEv>
  isOnPoint = false;
     c62:	f2 01       	movw	r30, r4
     c64:	15 8e       	std	Z+29, r1	; 0x1d
  return mask;
}
     c66:	81 2f       	mov	r24, r17
     c68:	2c 96       	adiw	r28, 0x0c	; 12
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	9f 90       	pop	r9
     c8a:	8f 90       	pop	r8
     c8c:	7f 90       	pop	r7
     c8e:	6f 90       	pop	r6
     c90:	5f 90       	pop	r5
     c92:	4f 90       	pop	r4
     c94:	3f 90       	pop	r3
     c96:	2f 90       	pop	r2
     c98:	08 95       	ret

00000c9a <_ZN11StepControl9raiseMaskEv>:

uint8_t StepControl::raiseMask(){
     c9a:	fc 01       	movw	r30, r24
  uint8_t mask = 0;

  if( cntA >= setA >> 1){
     c9c:	64 85       	ldd	r22, Z+12	; 0x0c
     c9e:	75 85       	ldd	r23, Z+13	; 0x0d
     ca0:	82 89       	ldd	r24, Z+18	; 0x12
     ca2:	93 89       	ldd	r25, Z+19	; 0x13
     ca4:	96 95       	lsr	r25
     ca6:	87 95       	ror	r24
     ca8:	68 17       	cp	r22, r24
     caa:	79 07       	cpc	r23, r25
     cac:	10 f0       	brcs	.+4      	; 0xcb2 <_ZN11StepControl9raiseMaskEv+0x18>
    mask |= 1<<5;
     cae:	80 e2       	ldi	r24, 0x20	; 32
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <_ZN11StepControl9raiseMaskEv+0x1a>
  isOnPoint = false;
  return mask;
}

uint8_t StepControl::raiseMask(){
  uint8_t mask = 0;
     cb2:	80 e0       	ldi	r24, 0x00	; 0

  if( cntA >= setA >> 1){
    mask |= 1<<5;
  }

  if( cntB >= setB >> 1){
     cb4:	46 85       	ldd	r20, Z+14	; 0x0e
     cb6:	57 85       	ldd	r21, Z+15	; 0x0f
     cb8:	24 89       	ldd	r18, Z+20	; 0x14
     cba:	35 89       	ldd	r19, Z+21	; 0x15
     cbc:	36 95       	lsr	r19
     cbe:	27 95       	ror	r18
     cc0:	42 17       	cp	r20, r18
     cc2:	53 07       	cpc	r21, r19
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <_ZN11StepControl9raiseMaskEv+0x2e>
    mask |= 1<<6;
     cc6:	80 64       	ori	r24, 0x40	; 64
  }

  if( cntC >= setC >> 1){
     cc8:	20 89       	ldd	r18, Z+16	; 0x10
     cca:	31 89       	ldd	r19, Z+17	; 0x11
     ccc:	a6 89       	ldd	r26, Z+22	; 0x16
     cce:	b7 89       	ldd	r27, Z+23	; 0x17
     cd0:	b6 95       	lsr	r27
     cd2:	a7 95       	ror	r26
     cd4:	2a 17       	cp	r18, r26
     cd6:	3b 07       	cpc	r19, r27
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <_ZN11StepControl9raiseMaskEv+0x42>
    mask |= 1<<7;
     cda:	80 68       	ori	r24, 0x80	; 128
  }

  if( cntA ){
     cdc:	61 15       	cp	r22, r1
     cde:	71 05       	cpc	r23, r1
     ce0:	21 f0       	breq	.+8      	; 0xcea <_ZN11StepControl9raiseMaskEv+0x50>
    --cntA;
     ce2:	61 50       	subi	r22, 0x01	; 1
     ce4:	71 09       	sbc	r23, r1
     ce6:	75 87       	std	Z+13, r23	; 0x0d
     ce8:	64 87       	std	Z+12, r22	; 0x0c
  }
  if( cntB ){
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	21 f0       	breq	.+8      	; 0xcf8 <_ZN11StepControl9raiseMaskEv+0x5e>
    --cntB;
     cf0:	41 50       	subi	r20, 0x01	; 1
     cf2:	51 09       	sbc	r21, r1
     cf4:	57 87       	std	Z+15, r21	; 0x0f
     cf6:	46 87       	std	Z+14, r20	; 0x0e
  }
  if( cntC ){
     cf8:	21 15       	cp	r18, r1
     cfa:	31 05       	cpc	r19, r1
     cfc:	21 f0       	breq	.+8      	; 0xd06 <_ZN11StepControl9raiseMaskEv+0x6c>
    --cntC;
     cfe:	21 50       	subi	r18, 0x01	; 1
     d00:	31 09       	sbc	r19, r1
     d02:	31 8b       	std	Z+17, r19	; 0x11
     d04:	20 8b       	std	Z+16, r18	; 0x10
  }
  return mask;
}
     d06:	08 95       	ret

00000d08 <_ZN11StepControl6onRiseEPS_>:

void StepControl::onRise(StepControl *control){    
  PORTF |= control->raiseMask();    
     d08:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZN11StepControl9raiseMaskEv>
     d0c:	91 b3       	in	r25, 0x11	; 17
     d0e:	89 2b       	or	r24, r25
     d10:	81 bb       	out	0x11, r24	; 17
     d12:	08 95       	ret

00000d14 <_ZN11StepControl8fallMaskEv>:
}

uint8_t StepControl::fallMask(){
     d14:	fc 01       	movw	r30, r24
  uint8_t mask = 0;

  if( !cntA & (posA!=newA)){
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	46 81       	ldd	r20, Z+6	; 0x06
     d1e:	57 81       	ldd	r21, Z+7	; 0x07
     d20:	84 17       	cp	r24, r20
     d22:	95 07       	cpc	r25, r21
     d24:	09 f4       	brne	.+2      	; 0xd28 <_ZN11StepControl8fallMaskEv+0x14>
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	22 23       	and	r18, r18
     d2a:	a9 f0       	breq	.+42     	; 0xd56 <_ZN11StepControl8fallMaskEv+0x42>
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	44 85       	ldd	r20, Z+12	; 0x0c
     d30:	55 85       	ldd	r21, Z+13	; 0x0d
     d32:	45 2b       	or	r20, r21
     d34:	09 f0       	breq	.+2      	; 0xd38 <_ZN11StepControl8fallMaskEv+0x24>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	22 23       	and	r18, r18
     d3a:	69 f0       	breq	.+26     	; 0xd56 <_ZN11StepControl8fallMaskEv+0x42>
    posA += dirA;
     d3c:	22 8d       	ldd	r18, Z+26	; 0x1a
     d3e:	82 0f       	add	r24, r18
     d40:	91 1d       	adc	r25, r1
     d42:	27 fd       	sbrc	r18, 7
     d44:	9a 95       	dec	r25
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24
    cntA  = setA;
     d4a:	82 89       	ldd	r24, Z+18	; 0x12
     d4c:	93 89       	ldd	r25, Z+19	; 0x13
     d4e:	95 87       	std	Z+13, r25	; 0x0d
     d50:	84 87       	std	Z+12, r24	; 0x0c
    mask |= 1 << 5;
     d52:	80 e2       	ldi	r24, 0x20	; 32
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <_ZN11StepControl8fallMaskEv+0x44>
void StepControl::onRise(StepControl *control){    
  PORTF |= control->raiseMask();    
}

uint8_t StepControl::fallMask(){
  uint8_t mask = 0;
     d56:	80 e0       	ldi	r24, 0x00	; 0
    posA += dirA;
    cntA  = setA;
    mask |= 1 << 5;
  }

  if( !cntB & (posB!=newB)){
     d58:	22 81       	ldd	r18, Z+2	; 0x02
     d5a:	33 81       	ldd	r19, Z+3	; 0x03
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	40 85       	ldd	r20, Z+8	; 0x08
     d60:	51 85       	ldd	r21, Z+9	; 0x09
     d62:	24 17       	cp	r18, r20
     d64:	35 07       	cpc	r19, r21
     d66:	09 f4       	brne	.+2      	; 0xd6a <_ZN11StepControl8fallMaskEv+0x56>
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	99 23       	and	r25, r25
     d6c:	a1 f0       	breq	.+40     	; 0xd96 <_ZN11StepControl8fallMaskEv+0x82>
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	46 85       	ldd	r20, Z+14	; 0x0e
     d72:	57 85       	ldd	r21, Z+15	; 0x0f
     d74:	45 2b       	or	r20, r21
     d76:	09 f0       	breq	.+2      	; 0xd7a <_ZN11StepControl8fallMaskEv+0x66>
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	99 23       	and	r25, r25
     d7c:	61 f0       	breq	.+24     	; 0xd96 <_ZN11StepControl8fallMaskEv+0x82>
    posB += dirB;
     d7e:	93 8d       	ldd	r25, Z+27	; 0x1b
     d80:	29 0f       	add	r18, r25
     d82:	31 1d       	adc	r19, r1
     d84:	97 fd       	sbrc	r25, 7
     d86:	3a 95       	dec	r19
     d88:	33 83       	std	Z+3, r19	; 0x03
     d8a:	22 83       	std	Z+2, r18	; 0x02
    cntB  = setB;
     d8c:	24 89       	ldd	r18, Z+20	; 0x14
     d8e:	35 89       	ldd	r19, Z+21	; 0x15
     d90:	37 87       	std	Z+15, r19	; 0x0f
     d92:	26 87       	std	Z+14, r18	; 0x0e
    mask |= 1 << 6;
     d94:	80 64       	ori	r24, 0x40	; 64
  }

  if( !cntC & (posC!=newC)){
     d96:	24 81       	ldd	r18, Z+4	; 0x04
     d98:	35 81       	ldd	r19, Z+5	; 0x05
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	42 85       	ldd	r20, Z+10	; 0x0a
     d9e:	53 85       	ldd	r21, Z+11	; 0x0b
     da0:	24 17       	cp	r18, r20
     da2:	35 07       	cpc	r19, r21
     da4:	09 f4       	brne	.+2      	; 0xda8 <_ZN11StepControl8fallMaskEv+0x94>
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	99 23       	and	r25, r25
     daa:	a1 f0       	breq	.+40     	; 0xdd4 <_ZN11StepControl8fallMaskEv+0xc0>
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	40 89       	ldd	r20, Z+16	; 0x10
     db0:	51 89       	ldd	r21, Z+17	; 0x11
     db2:	45 2b       	or	r20, r21
     db4:	09 f0       	breq	.+2      	; 0xdb8 <_ZN11StepControl8fallMaskEv+0xa4>
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	99 23       	and	r25, r25
     dba:	61 f0       	breq	.+24     	; 0xdd4 <_ZN11StepControl8fallMaskEv+0xc0>
    posC += dirC;
     dbc:	94 8d       	ldd	r25, Z+28	; 0x1c
     dbe:	29 0f       	add	r18, r25
     dc0:	31 1d       	adc	r19, r1
     dc2:	97 fd       	sbrc	r25, 7
     dc4:	3a 95       	dec	r19
     dc6:	35 83       	std	Z+5, r19	; 0x05
     dc8:	24 83       	std	Z+4, r18	; 0x04
    cntC  = setC;
     dca:	26 89       	ldd	r18, Z+22	; 0x16
     dcc:	37 89       	ldd	r19, Z+23	; 0x17
     dce:	31 8b       	std	Z+17, r19	; 0x11
     dd0:	20 8b       	std	Z+16, r18	; 0x10
    mask |= 1 << 7;
     dd2:	80 68       	ori	r24, 0x80	; 128
  }
  return mask;
}
     dd4:	08 95       	ret

00000dd6 <_ZN11StepControl6onFallEPS_>:

void StepControl::onFall(StepControl *control){  
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	ec 01       	movw	r28, r24
  uint8_t mask = control->fallMask();
     ddc:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN11StepControl8fallMaskEv>
  PORTF &= ~mask;
     de0:	91 b3       	in	r25, 0x11	; 17
     de2:	28 2f       	mov	r18, r24
     de4:	20 95       	com	r18
     de6:	92 23       	and	r25, r18
     de8:	91 bb       	out	0x11, r25	; 17
  
  control->isOnPoint = (mask == 0);  
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	81 11       	cpse	r24, r1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9d 8f       	std	Y+29, r25	; 0x1d
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <_ZN11StepControl9getInputsEv>:

uint8_t StepControl::getInputs(){
  uint8_t tmp = PIND & 0b00011111;
     df8:	89 b1       	in	r24, 0x09	; 9
  tmp |= (PIND & 0x80)>>2;
     dfa:	29 b1       	in	r18, 0x09	; 9
     dfc:	20 78       	andi	r18, 0x80	; 128
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	35 95       	asr	r19
     e02:	27 95       	ror	r18
     e04:	35 95       	asr	r19
     e06:	27 95       	ror	r18
  
  control->isOnPoint = (mask == 0);  
}

uint8_t StepControl::getInputs(){
  uint8_t tmp = PIND & 0b00011111;
     e08:	8f 71       	andi	r24, 0x1F	; 31
  tmp |= (PIND & 0x80)>>2;
  return tmp;
}
     e0a:	82 2b       	or	r24, r18
     e0c:	08 95       	ret

00000e0e <_ZN11StepControl9initAxistEh>:
  this->goTo(dZeroA, dZeroB, dZeroC,0);  
  
  return true;
}

bool StepControl::initAxist(uint8_t num){
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	7c 01       	movw	r14, r24
     e1c:	d6 2f       	mov	r29, r22
  uint8_t mask = 0;
  int16_t *cnt = 0;
  
  if( num == 0 ){
     e1e:	61 11       	cpse	r22, r1
     e20:	10 c0       	rjmp	.+32     	; 0xe42 <_ZN11StepControl9initAxistEh+0x34>
    this->goTo(-10000, posB>>1, posC>>1, 0);    
     e22:	fc 01       	movw	r30, r24
     e24:	24 81       	ldd	r18, Z+4	; 0x04
     e26:	35 81       	ldd	r19, Z+5	; 0x05
     e28:	35 95       	asr	r19
     e2a:	27 95       	ror	r18
     e2c:	42 81       	ldd	r20, Z+2	; 0x02
     e2e:	53 81       	ldd	r21, Z+3	; 0x03
     e30:	55 95       	asr	r21
     e32:	47 95       	ror	r20
     e34:	00 e0       	ldi	r16, 0x00	; 0
     e36:	60 ef       	ldi	r22, 0xF0	; 240
     e38:	78 ed       	ldi	r23, 0xD8	; 216
     e3a:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN11StepControl4goToEiiih>
    cnt = &posA;
     e3e:	87 01       	movw	r16, r14
     e40:	2a c0       	rjmp	.+84     	; 0xe96 <_ZN11StepControl9initAxistEh+0x88>
  } else if( num == 1 ){
     e42:	61 30       	cpi	r22, 0x01	; 1
     e44:	91 f4       	brne	.+36     	; 0xe6a <_ZN11StepControl9initAxistEh+0x5c>
    this->goTo(posA>>1, -10000, posC>>1, 0);
     e46:	fc 01       	movw	r30, r24
     e48:	24 81       	ldd	r18, Z+4	; 0x04
     e4a:	35 81       	ldd	r19, Z+5	; 0x05
     e4c:	35 95       	asr	r19
     e4e:	27 95       	ror	r18
     e50:	60 81       	ld	r22, Z
     e52:	71 81       	ldd	r23, Z+1	; 0x01
     e54:	75 95       	asr	r23
     e56:	67 95       	ror	r22
     e58:	00 e0       	ldi	r16, 0x00	; 0
     e5a:	40 ef       	ldi	r20, 0xF0	; 240
     e5c:	58 ed       	ldi	r21, 0xD8	; 216
     e5e:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN11StepControl4goToEiiih>
    cnt = &posB;
     e62:	87 01       	movw	r16, r14
     e64:	0e 5f       	subi	r16, 0xFE	; 254
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	16 c0       	rjmp	.+44     	; 0xe96 <_ZN11StepControl9initAxistEh+0x88>
  } else if( num == 2 ){
     e6a:	62 30       	cpi	r22, 0x02	; 2
     e6c:	91 f4       	brne	.+36     	; 0xe92 <_ZN11StepControl9initAxistEh+0x84>
    this->goTo(posA>>1, posB>>1, -10000, 0);
     e6e:	fc 01       	movw	r30, r24
     e70:	42 81       	ldd	r20, Z+2	; 0x02
     e72:	53 81       	ldd	r21, Z+3	; 0x03
     e74:	55 95       	asr	r21
     e76:	47 95       	ror	r20
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	75 95       	asr	r23
     e7e:	67 95       	ror	r22
     e80:	00 e0       	ldi	r16, 0x00	; 0
     e82:	20 ef       	ldi	r18, 0xF0	; 240
     e84:	38 ed       	ldi	r19, 0xD8	; 216
     e86:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN11StepControl4goToEiiih>
    cnt = &posC;
     e8a:	87 01       	movw	r16, r14
     e8c:	0c 5f       	subi	r16, 0xFC	; 252
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <_ZN11StepControl9initAxistEh+0x88>
  return true;
}

bool StepControl::initAxist(uint8_t num){
  uint8_t mask = 0;
  int16_t *cnt = 0;
     e92:	00 e0       	ldi	r16, 0x00	; 0
     e94:	10 e0       	ldi	r17, 0x00	; 0
  } else if( num == 2 ){
    this->goTo(posA>>1, posB>>1, -10000, 0);
    cnt = &posC;
  }

  while((mask == 0) && ((*cnt)>-19500)){
     e96:	f8 01       	movw	r30, r16
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	85 3d       	cpi	r24, 0xD5	; 213
     e9e:	93 4b       	sbci	r25, 0xB3	; 179
     ea0:	d4 f0       	brlt	.+52     	; 0xed6 <_ZN11StepControl9initAxistEh+0xc8>
    mask = getInputs() & ((1<<num) );// | (1<<(num+3)));    
     ea2:	c1 e0       	ldi	r28, 0x01	; 1
     ea4:	0d 2e       	mov	r0, r29
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <_ZN11StepControl9initAxistEh+0x9c>
     ea8:	cc 0f       	add	r28, r28
     eaa:	0a 94       	dec	r0
     eac:	ea f7       	brpl	.-6      	; 0xea8 <_ZN11StepControl9initAxistEh+0x9a>
     eae:	c7 01       	movw	r24, r14
     eb0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN11StepControl9getInputsEv>
     eb4:	8c 23       	and	r24, r28
  } else if( num == 2 ){
    this->goTo(posA>>1, posB>>1, -10000, 0);
    cnt = &posC;
  }

  while((mask == 0) && ((*cnt)>-19500)){
     eb6:	39 f4       	brne	.+14     	; 0xec6 <_ZN11StepControl9initAxistEh+0xb8>
     eb8:	f8 01       	movw	r30, r16
     eba:	20 81       	ld	r18, Z
     ebc:	31 81       	ldd	r19, Z+1	; 0x01
     ebe:	25 3d       	cpi	r18, 0xD5	; 213
     ec0:	33 4b       	sbci	r19, 0xB3	; 179
     ec2:	ac f7       	brge	.-22     	; 0xeae <_ZN11StepControl9initAxistEh+0xa0>
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <_ZN11StepControl9initAxistEh+0xc8>

  if( mask == 0 ){
    return false;
  }

  proclaimPois(num, -50);  
     ec6:	4e ec       	ldi	r20, 0xCE	; 206
     ec8:	5f ef       	ldi	r21, 0xFF	; 255
     eca:	6d 2f       	mov	r22, r29
     ecc:	c7 01       	movw	r24, r14
     ece:	0e 94 af 04 	call	0x95e	; 0x95e <_ZN11StepControl12proclaimPoisEhi>
  
  return true;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <_ZN11StepControl9initAxistEh+0xca>
  while((mask == 0) && ((*cnt)>-19500)){
    mask = getInputs() & ((1<<num) );// | (1<<(num+3)));    
  }

  if( mask == 0 ){
    return false;
     ed6:	80 e0       	ldi	r24, 0x00	; 0
  }

  proclaimPois(num, -50);  
  
  return true;
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	08 95       	ret

00000ee6 <_ZN11StepControl10initializeEv>:
  uint8_t tmp = PIND & 0b00011111;
  tmp |= (PIND & 0x80)>>2;
  return tmp;
}

bool StepControl::initialize(){  
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	cf 93       	push	r28
     eee:	7c 01       	movw	r14, r24
  TIMER_STEP_STOP;
     ef0:	15 bc       	out	0x25, r1	; 37
  TIMER_INIT_START;
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	85 bd       	out	0x25, r24	; 37
  
  if( initAxist(0) == false ) {
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	c7 01       	movw	r24, r14
     efa:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN11StepControl9initAxistEh>
     efe:	c8 2f       	mov	r28, r24
     f00:	88 23       	and	r24, r24
     f02:	f1 f0       	breq	.+60     	; 0xf40 <_ZN11StepControl10initializeEv+0x5a>
    return false;
  }
  if( !initAxist(1) ) {
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	c7 01       	movw	r24, r14
     f08:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN11StepControl9initAxistEh>
     f0c:	c8 2f       	mov	r28, r24
     f0e:	88 23       	and	r24, r24
     f10:	b9 f0       	breq	.+46     	; 0xf40 <_ZN11StepControl10initializeEv+0x5a>
    return false;
  }
  if( !initAxist(2) ) {
     f12:	62 e0       	ldi	r22, 0x02	; 2
     f14:	c7 01       	movw	r24, r14
     f16:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN11StepControl9initAxistEh>
     f1a:	c8 2f       	mov	r28, r24
     f1c:	88 23       	and	r24, r24
     f1e:	81 f0       	breq	.+32     	; 0xf40 <_ZN11StepControl10initializeEv+0x5a>
    return false;
  }
  this->goTo(dZeroA, dZeroB, dZeroC,0);  
     f20:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f24:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f28:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <dZeroB>
     f2c:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <dZeroB+0x1>
     f30:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <dZeroA>
     f34:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <dZeroA+0x1>
     f38:	00 e0       	ldi	r16, 0x00	; 0
     f3a:	c7 01       	movw	r24, r14
     f3c:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN11StepControl4goToEiiih>
  
  return true;
}
     f40:	8c 2f       	mov	r24, r28
     f42:	cf 91       	pop	r28
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	08 95       	ret

00000f4c <_ZN3USB7initPLLEv>:
#include <avr/interrupt.h>
#include <string.h>
#include "usb.h"

void USB::initPLL(){
  PLLFRQ   = 0b01001010;     //Set PLL freq 96MHz and PLL USB divider 2
     f4c:	8a e4       	ldi	r24, 0x4A	; 74
     f4e:	82 bf       	out	0x32, r24	; 50
  PLLCSR  |= (1<<PINDIV);    //Set PLL div for 16MHz
     f50:	89 b5       	in	r24, 0x29	; 41
     f52:	80 61       	ori	r24, 0x10	; 16
     f54:	89 bd       	out	0x29, r24	; 41
  PLLCSR  |= (1<<PLLE);
     f56:	89 b5       	in	r24, 0x29	; 41
     f58:	82 60       	ori	r24, 0x02	; 2
     f5a:	89 bd       	out	0x29, r24	; 41

  while( (PLLCSR & 0x01) == 0)
     f5c:	09 b4       	in	r0, 0x29	; 41
     f5e:	00 fe       	sbrs	r0, 0
     f60:	fd cf       	rjmp	.-6      	; 0xf5c <_ZN3USB7initPLLEv+0x10>
    ;
}
     f62:	08 95       	ret

00000f64 <_ZN3USB17initConfigurationEbbj>:
  epCounter = 1;
  initInternalEndpoint(0, CONTROL,IN,SIZE64,ONE);
  sei();
}

void USB::initConfiguration(bool busPower, bool remoteWakeup, uint16_t powerVal){
     f64:	fc 01       	movw	r30, r24
  config.len              = sizeof(USB_Config_Descriptor);  
     f66:	89 e0       	ldi	r24, 0x09	; 9
     f68:	84 a7       	std	Z+44, r24	; 0x2c
  config.dtype            = 0x02;
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	85 a7       	std	Z+45, r24	; 0x2d
  config.clen             = config.len;			
     f6e:	89 e0       	ldi	r24, 0x09	; 9
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	97 a7       	std	Z+47, r25	; 0x2f
     f74:	86 a7       	std	Z+46, r24	; 0x2e
  config.numInterfaces    = 0;
     f76:	10 aa       	std	Z+48, r1	; 0x30
  config.config           = 1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	81 ab       	std	Z+49, r24	; 0x31
bool  USB::isEnumerate(){
  return this->isEnum;
}

uint8_t  USB::getStrId(){
  return (this->useStr?++this->stringCounter:0);
     f7c:	87 ad       	ldd	r24, Z+63	; 0x3f
     f7e:	88 23       	and	r24, r24
     f80:	39 f0       	breq	.+14     	; 0xf90 <_ZN3USB17initConfigurationEbbj+0x2c>
     f82:	df 01       	movw	r26, r30
     f84:	ad 5b       	subi	r26, 0xBD	; 189
     f86:	bf 4f       	sbci	r27, 0xFF	; 255
     f88:	8c 91       	ld	r24, X
     f8a:	8f 5f       	subi	r24, 0xFF	; 255
     f8c:	8c 93       	st	X, r24
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <_ZN3USB17initConfigurationEbbj+0x2e>
     f90:	80 e0       	ldi	r24, 0x00	; 0
  config.len              = sizeof(USB_Config_Descriptor);  
  config.dtype            = 0x02;
  config.clen             = config.len;			
  config.numInterfaces    = 0;
  config.config           = 1;
  config.iconfig          = getStrId();
     f92:	82 ab       	std	Z+50, r24	; 0x32
  config.attributes       = 0x80 | (busPower?0:0x40) | (remoteWakeup?0x20:0);
     f94:	61 11       	cpse	r22, r1
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <_ZN3USB17initConfigurationEbbj+0x38>
     f98:	80 ec       	ldi	r24, 0xC0	; 192
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <_ZN3USB17initConfigurationEbbj+0x3a>
     f9c:	80 e8       	ldi	r24, 0x80	; 128
     f9e:	41 11       	cpse	r20, r1
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <_ZN3USB17initConfigurationEbbj+0x42>
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <_ZN3USB17initConfigurationEbbj+0x44>
     fa6:	90 e2       	ldi	r25, 0x20	; 32
     fa8:	89 2b       	or	r24, r25
     faa:	83 ab       	std	Z+51, r24	; 0x33
  config.maxPower         = powerVal >> 1;
     fac:	36 95       	lsr	r19
     fae:	27 95       	ror	r18
     fb0:	24 ab       	std	Z+52, r18	; 0x34
     fb2:	08 95       	ret

00000fb4 <_ZN3USB13initInterfaceEv>:
}

void USB::initInterface(void){
     fb4:	fc 01       	movw	r30, r24
  iface.bLength           = sizeof(USB_Interface_Descriptor);
     fb6:	89 e0       	ldi	r24, 0x09	; 9
     fb8:	85 ab       	std	Z+53, r24	; 0x35
  iface.bDescriptorType   = 0x04;
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	86 ab       	std	Z+54, r24	; 0x36
  iface.bInterfaceNumber  = 0; 
     fbe:	17 aa       	std	Z+55, r1	; 0x37
  iface.bAlternateSetting = 0;
     fc0:	10 ae       	std	Z+56, r1	; 0x38
  iface.bNumEndpoints     = 0;
     fc2:	11 ae       	std	Z+57, r1	; 0x39
  iface.bInterfaceClass   = 0xFF;
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	82 af       	std	Z+58, r24	; 0x3a
  iface.bInterfaceSubClass= 0x00;
     fc8:	13 ae       	std	Z+59, r1	; 0x3b
  iface.bInterfaceProtocol= 0xFF;
     fca:	84 af       	std	Z+60, r24	; 0x3c
bool  USB::isEnumerate(){
  return this->isEnum;
}

uint8_t  USB::getStrId(){
  return (this->useStr?++this->stringCounter:0);
     fcc:	87 ad       	ldd	r24, Z+63	; 0x3f
     fce:	88 23       	and	r24, r24
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <_ZN3USB13initInterfaceEv+0x2c>
     fd2:	df 01       	movw	r26, r30
     fd4:	ad 5b       	subi	r26, 0xBD	; 189
     fd6:	bf 4f       	sbci	r27, 0xFF	; 255
     fd8:	8c 91       	ld	r24, X
     fda:	8f 5f       	subi	r24, 0xFF	; 255
     fdc:	8c 93       	st	X, r24
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <_ZN3USB13initInterfaceEv+0x2e>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
  iface.bAlternateSetting = 0;
  iface.bNumEndpoints     = 0;
  iface.bInterfaceClass   = 0xFF;
  iface.bInterfaceSubClass= 0x00;
  iface.bInterfaceProtocol= 0xFF;
  iface.iInterface        = getStrId();
     fe2:	85 af       	std	Z+61, r24	; 0x3d

  config.numInterfaces ++;
     fe4:	80 a9       	ldd	r24, Z+48	; 0x30
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	80 ab       	std	Z+48, r24	; 0x30
  config.clen += iface.bLength;
     fea:	86 a5       	ldd	r24, Z+46	; 0x2e
     fec:	97 a5       	ldd	r25, Z+47	; 0x2f
     fee:	09 96       	adiw	r24, 0x09	; 9
     ff0:	97 a7       	std	Z+47, r25	; 0x2f
     ff2:	86 a7       	std	Z+46, r24	; 0x2e
     ff4:	08 95       	ret

00000ff6 <_ZN3USB12initEndpointEh23USB_Endpoint_Definition>:
}

bool USB::initEndpoint(uint8_t num, USB_Endpoint_Definition def){
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	28 97       	sbiw	r28, 0x08	; 8
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	e9 82       	std	Y+1, r14	; 0x01
    1014:	7f 2d       	mov	r23, r15
    1016:	fa 82       	std	Y+2, r15	; 0x02
    1018:	0b 83       	std	Y+3, r16	; 0x03
    101a:	1c 83       	std	Y+4, r17	; 0x04
    101c:	2d 83       	std	Y+5, r18	; 0x05
    101e:	3e 83       	std	Y+6, r19	; 0x06
    1020:	4f 83       	std	Y+7, r20	; 0x07
    1022:	58 87       	std	Y+8, r21	; 0x08
  cli();
    1024:	f8 94       	cli
  if( (num==0) || (num>6)) {
    1026:	2f ef       	ldi	r18, 0xFF	; 255
    1028:	26 0f       	add	r18, r22
    102a:	26 30       	cpi	r18, 0x06	; 6
    102c:	08 f0       	brcs	.+2      	; 0x1030 <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0x3a>
    102e:	9e c0       	rjmp	.+316    	; 0x116c <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0x176>
    return false;
  }

  memcpy(&epDefinitions[num],&def,sizeof(USB_Endpoint_Definition));
    1030:	46 2f       	mov	r20, r22
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	fa 82       	std	Y+2, r15	; 0x02
    1036:	9a 01       	movw	r18, r20
    1038:	22 0f       	add	r18, r18
    103a:	33 1f       	adc	r19, r19
    103c:	22 0f       	add	r18, r18
    103e:	33 1f       	adc	r19, r19
    1040:	22 0f       	add	r18, r18
    1042:	33 1f       	adc	r19, r19
    1044:	8c 01       	movw	r16, r24
    1046:	02 0f       	add	r16, r18
    1048:	13 1f       	adc	r17, r19
    104a:	06 51       	subi	r16, 0x16	; 22
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	68 94       	set
    1050:	ff 24       	eor	r15, r15
    1052:	f3 f8       	bld	r15, 3
    1054:	fe 01       	movw	r30, r28
    1056:	31 96       	adiw	r30, 0x01	; 1
    1058:	d8 01       	movw	r26, r16
    105a:	01 90       	ld	r0, Z+
    105c:	0d 92       	st	X+, r0
    105e:	fa 94       	dec	r15
    1060:	e1 f7       	brne	.-8      	; 0x105a <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0x64>
  epDefinitions[num].init = 1;
    1062:	e1 e0       	ldi	r30, 0x01	; 1
    1064:	d8 01       	movw	r26, r16
    1066:	ec 93       	st	X, r30

  USB_Endpoint_Descriptor *ep = &epDescriptors[num];
  
  ep->bLength           = sizeof(USB_Endpoint_Descriptor);
    1068:	24 1b       	sub	r18, r20
    106a:	35 0b       	sbc	r19, r21
    106c:	28 0f       	add	r18, r24
    106e:	39 1f       	adc	r19, r25
    1070:	f9 01       	movw	r30, r18
    1072:	e7 54       	subi	r30, 0x47	; 71
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	a7 e0       	ldi	r26, 0x07	; 7
    1078:	a0 83       	st	Z, r26
  ep->bDescriptorType   = 0x05;
    107a:	31 96       	adiw	r30, 0x01	; 1
    107c:	25 e0       	ldi	r18, 0x05	; 5
    107e:	20 83       	st	Z, r18
  ep->bEndpointAddress  = num | ((def.dir==IN)?0x80:0);
    1080:	2b 81       	ldd	r18, Y+3	; 0x03
    1082:	21 30       	cpi	r18, 0x01	; 1
    1084:	11 f0       	breq	.+4      	; 0x108a <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0x94>
    1086:	a0 e0       	ldi	r26, 0x00	; 0
    1088:	01 c0       	rjmp	.+2      	; 0x108c <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0x96>
    108a:	a0 e8       	ldi	r26, 0x80	; 128
    108c:	9a 01       	movw	r18, r20
    108e:	22 0f       	add	r18, r18
    1090:	33 1f       	adc	r19, r19
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	24 1b       	sub	r18, r20
    109c:	35 0b       	sbc	r19, r21
    109e:	28 0f       	add	r18, r24
    10a0:	39 1f       	adc	r19, r25
    10a2:	f9 01       	movw	r30, r18
    10a4:	e5 54       	subi	r30, 0x45	; 69
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	6a 2b       	or	r22, r26
    10aa:	60 83       	st	Z, r22
  ep->bmAttributes      = def.type & 0b11;
    10ac:	31 96       	adiw	r30, 0x01	; 1
    10ae:	67 2f       	mov	r22, r23
    10b0:	63 70       	andi	r22, 0x03	; 3
    10b2:	60 83       	st	Z, r22
  ep->wMaxPacketSize    = 8 * (1<<def.size);
    10b4:	d9 01       	movw	r26, r18
    10b6:	a3 54       	subi	r26, 0x43	; 67
    10b8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ba:	e8 e0       	ldi	r30, 0x08	; 8
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	0c 80       	ldd	r0, Y+4	; 0x04
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0xd0>
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0xcc>
    10ca:	ed 93       	st	X+, r30
    10cc:	fc 93       	st	X, r31
  ep->bInterval         = 0;
    10ce:	f9 01       	movw	r30, r18
    10d0:	e1 54       	subi	r30, 0x41	; 65
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	10 82       	st	Z, r1

  if( def.type == INT ){
    10d6:	73 30       	cpi	r23, 0x03	; 3
    10d8:	31 f4       	brne	.+12     	; 0x10e6 <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0xf0>
    ep->bInterval = def.interval;
    10da:	f9 01       	movw	r30, r18
    10dc:	e1 54       	subi	r30, 0x41	; 65
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	2e 81       	ldd	r18, Y+6	; 0x06
    10e2:	20 83       	st	Z, r18
    10e4:	23 c0       	rjmp	.+70     	; 0x112c <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0x136>
  } else if( def.type == ISOCHR ){
    10e6:	71 30       	cpi	r23, 0x01	; 1
    10e8:	09 f5       	brne	.+66     	; 0x112c <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0x136>
    ep->bInterval = 1;
    10ea:	fa 01       	movw	r30, r20
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	e4 1b       	sub	r30, r20
    10fa:	f5 0b       	sbc	r31, r21
    10fc:	e8 0f       	add	r30, r24
    10fe:	f9 1f       	adc	r31, r25
    1100:	df 01       	movw	r26, r30
    1102:	a1 54       	subi	r26, 0x41	; 65
    1104:	bf 4f       	sbci	r27, 0xFF	; 255
    1106:	21 e0       	ldi	r18, 0x01	; 1
    1108:	2c 93       	st	X, r18
    ep->bmAttributes |= ((def.sync & 0b11) <<2) | ((def.iType & 0b11) <<4); 
    110a:	e4 54       	subi	r30, 0x44	; 68
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	2f 81       	ldd	r18, Y+7	; 0x07
    1110:	23 70       	andi	r18, 0x03	; 3
    1112:	62 2f       	mov	r22, r18
    1114:	66 0f       	add	r22, r22
    1116:	66 0f       	add	r22, r22
    1118:	38 85       	ldd	r19, Y+8	; 0x08
    111a:	33 70       	andi	r19, 0x03	; 3
    111c:	b0 e1       	ldi	r27, 0x10	; 16
    111e:	3b 9f       	mul	r19, r27
    1120:	90 01       	movw	r18, r0
    1122:	11 24       	eor	r1, r1
    1124:	26 2b       	or	r18, r22
    1126:	30 81       	ld	r19, Z
    1128:	23 2b       	or	r18, r19
    112a:	20 83       	st	Z, r18
  }

  iface.bNumEndpoints++;
    112c:	fc 01       	movw	r30, r24
    112e:	21 ad       	ldd	r18, Z+57	; 0x39
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	21 af       	std	Z+57, r18	; 0x39
  config.clen += ep->bLength;
    1134:	fa 01       	movw	r30, r20
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	e4 1b       	sub	r30, r20
    1144:	f5 0b       	sbc	r31, r21
    1146:	e8 0f       	add	r30, r24
    1148:	f9 1f       	adc	r31, r25
    114a:	e7 54       	subi	r30, 0x47	; 71
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	40 81       	ld	r20, Z
    1150:	dc 01       	movw	r26, r24
    1152:	9e 96       	adiw	r26, 0x2e	; 46
    1154:	2d 91       	ld	r18, X+
    1156:	3c 91       	ld	r19, X
    1158:	9f 97       	sbiw	r26, 0x2f	; 47
    115a:	24 0f       	add	r18, r20
    115c:	31 1d       	adc	r19, r1
    115e:	9f 96       	adiw	r26, 0x2f	; 47
    1160:	3c 93       	st	X, r19
    1162:	2e 93       	st	-X, r18
    1164:	9e 97       	sbiw	r26, 0x2e	; 46
  
  sei();
    1166:	78 94       	sei
  return true;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	01 c0       	rjmp	.+2      	; 0x116e <_ZN3USB12initEndpointEh23USB_Endpoint_Definition+0x178>
}

bool USB::initEndpoint(uint8_t num, USB_Endpoint_Definition def){
  cli();
  if( (num==0) || (num>6)) {
    return false;
    116c:	80 e0       	ldi	r24, 0x00	; 0
  iface.bNumEndpoints++;
  config.clen += ep->bLength;
  
  sei();
  return true;
}
    116e:	28 96       	adiw	r28, 0x08	; 8
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	08 95       	ret

00001188 <_ZN3USB11isEnumerateEv>:
  }
}

bool  USB::isEnumerate(){
  return this->isEnum;
}
    1188:	fc 01       	movw	r30, r24
    118a:	86 ad       	ldd	r24, Z+62	; 0x3e
    118c:	08 95       	ret

0000118e <_ZN3USB6waitInEv>:
  selectEndPoint(0);
  UEIENX = (1 << RXSTPE);  
}

void USB::waitIn(void){
  while (!(UEINTX & (1<<TXINI))) 
    118e:	e8 ee       	ldi	r30, 0xE8	; 232
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	80 ff       	sbrs	r24, 0
    1196:	fd cf       	rjmp	.-6      	; 0x1192 <_ZN3USB6waitInEv+0x4>
    ;
}
    1198:	08 95       	ret

0000119a <_ZN3USB7clearInEv>:

void USB::clearIn(void){
  UEINTX &= ~((1<<FIFOCON) | (1<<RXOUTI) |(1<<TXINI)); 
    119a:	e8 ee       	ldi	r30, 0xE8	; 232
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	20 81       	ld	r18, Z
    11a0:	2a 77       	andi	r18, 0x7A	; 122
    11a2:	20 83       	st	Z, r18
  this->sendBufPos = 0;
    11a4:	fc 01       	movw	r30, r24
    11a6:	ee 5b       	subi	r30, 0xBE	; 190
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	10 82       	st	Z, r1
    11ac:	08 95       	ret

000011ae <_ZN3USB5stallEv>:
}

void USB::stall(void){
  UECONX |= (1<<STALLRQ);
    11ae:	eb ee       	ldi	r30, 0xEB	; 235
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	80 62       	ori	r24, 0x20	; 32
    11b6:	80 83       	st	Z, r24
    11b8:	08 95       	ret

000011ba <_ZN3USB10clearStallEh>:
    this->sendBufPos++;
  }
}

void USB::selectEndPoint(uint8_t num){
  UENUM  = ((num) & 0x0F);
    11ba:	6f 70       	andi	r22, 0x0F	; 15
    11bc:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
  UECONX |= (1<<STALLRQ);
}

void USB::clearStall(uint8_t num){
  USB::selectEndPoint(num);
  UECONX |= (1 << STALLRQC);
    11c0:	eb ee       	ldi	r30, 0xEB	; 235
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	80 61       	ori	r24, 0x10	; 16
    11c8:	80 83       	st	Z, r24
    11ca:	08 95       	ret

000011cc <_ZN3USB7readBufEPhh>:
}

void USB::readBuf(uint8_t *buffer, uint8_t size){
  while(size--){
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	84 0f       	add	r24, r20
    11d0:	44 23       	and	r20, r20
    11d2:	41 f0       	breq	.+16     	; 0x11e4 <_ZN3USB7readBufEPhh+0x18>
    11d4:	e6 2f       	mov	r30, r22
    11d6:	f7 2f       	mov	r31, r23
    *(buffer++) = UEDATX;
    11d8:	a1 ef       	ldi	r26, 0xF1	; 241
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	9c 91       	ld	r25, X
    11de:	91 93       	st	Z+, r25
  USB::selectEndPoint(num);
  UECONX |= (1 << STALLRQC);
}

void USB::readBuf(uint8_t *buffer, uint8_t size){
  while(size--){
    11e0:	81 50       	subi	r24, 0x01	; 1
    11e2:	e0 f7       	brcc	.-8      	; 0x11dc <_ZN3USB7readBufEPhh+0x10>
    11e4:	08 95       	ret

000011e6 <_ZN3USB8writeBufEPKhhh>:
    *(buffer++) = UEDATX;
  }
}

void USB::writeBuf(const uint8_t *buffer, uint8_t bufSize, uint8_t maxSize){  
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
  if( (this->sendBufPos + bufSize) > maxSize ) {
    11ea:	dc 01       	movw	r26, r24
    11ec:	ae 5b       	subi	r26, 0xBE	; 190
    11ee:	bf 4f       	sbci	r27, 0xFF	; 255
    11f0:	3c 91       	ld	r19, X
    11f2:	84 2f       	mov	r24, r20
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	83 0f       	add	r24, r19
    11f8:	91 1d       	adc	r25, r1
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	8c f0       	brlt	.+34     	; 0x1224 <_ZN3USB8writeBufEPKhhh+0x3e>
    return;
  }
  uint8_t b,pos = 0;  
  while( bufSize-- ){
    1202:	44 23       	and	r20, r20
    1204:	79 f0       	breq	.+30     	; 0x1224 <_ZN3USB8writeBufEPKhhh+0x3e>
    1206:	90 e0       	ldi	r25, 0x00	; 0
    b = buffer[pos++];
    UEDATX = b;
    1208:	c1 ef       	ldi	r28, 0xF1	; 241
    120a:	d0 e0       	ldi	r29, 0x00	; 0
    this->sendBufPos++;
    120c:	fd 01       	movw	r30, r26
  if( (this->sendBufPos + bufSize) > maxSize ) {
    return;
  }
  uint8_t b,pos = 0;  
  while( bufSize-- ){
    b = buffer[pos++];
    120e:	db 01       	movw	r26, r22
    1210:	a9 0f       	add	r26, r25
    1212:	b1 1d       	adc	r27, r1
    1214:	8c 91       	ld	r24, X
    UEDATX = b;
    1216:	88 83       	st	Y, r24
    this->sendBufPos++;
    1218:	20 81       	ld	r18, Z
    121a:	2f 5f       	subi	r18, 0xFF	; 255
    121c:	20 83       	st	Z, r18
  if( (this->sendBufPos + bufSize) > maxSize ) {
    return;
  }
  uint8_t b,pos = 0;  
  while( bufSize-- ){
    b = buffer[pos++];
    121e:	9f 5f       	subi	r25, 0xFF	; 255
void USB::writeBuf(const uint8_t *buffer, uint8_t bufSize, uint8_t maxSize){  
  if( (this->sendBufPos + bufSize) > maxSize ) {
    return;
  }
  uint8_t b,pos = 0;  
  while( bufSize-- ){
    1220:	94 13       	cpse	r25, r20
    1222:	f5 cf       	rjmp	.-22     	; 0x120e <_ZN3USB8writeBufEPKhhh+0x28>
    b = buffer[pos++];
    UEDATX = b;
    this->sendBufPos++;
  }
}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <_ZN3USB14selectEndPointEh>:

void USB::selectEndPoint(uint8_t num){
  UENUM  = ((num) & 0x0F);
    122a:	8f 70       	andi	r24, 0x0F	; 15
    122c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1230:	08 95       	ret

00001232 <_ZN3USB20initInternalEndpointEh6upType11upDirection6upSize6upBank>:
}

bool USB::initInternalEndpoint(const uint8_t num, upType type, upDirection dir,upSize size, upBank bank){
    1232:	0f 93       	push	r16
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	00 d0       	rcall	.+0      	; 0x123a <_ZN3USB20initInternalEndpointEh6upType11upDirection6upSize6upBank+0x8>
    123a:	00 d0       	rcall	.+0      	; 0x123c <_ZN3USB20initInternalEndpointEh6upType11upDirection6upSize6upBank+0xa>
    123c:	00 d0       	rcall	.+0      	; 0x123e <_ZN3USB20initInternalEndpointEh6upType11upDirection6upSize6upBank+0xc>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t b1 = 0,
    1242:	1e 82       	std	Y+6, r1	; 0x06
          b2 = 0,
    1244:	1d 82       	std	Y+5, r1	; 0x05
          tp = (uint8_t) type,
    1246:	6c 83       	std	Y+4, r22	; 0x04
          dr = (uint8_t) dir,
    1248:	4b 83       	std	Y+3, r20	; 0x03
          sz = (uint8_t) size,
    124a:	2a 83       	std	Y+2, r18	; 0x02
          bn = (uint8_t) bank;
    124c:	09 83       	std	Y+1, r16	; 0x01

  b1 = (tp<<6) | dr;
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	4b 81       	ldd	r20, Y+3	; 0x03
    1252:	50 e4       	ldi	r21, 0x40	; 64
    1254:	95 9f       	mul	r25, r21
    1256:	90 01       	movw	r18, r0
    1258:	11 24       	eor	r1, r1
    125a:	24 2b       	or	r18, r20
    125c:	2e 83       	std	Y+6, r18	; 0x06
  b2 = (sz<<4) | (bn<<2);
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	29 81       	ldd	r18, Y+1	; 0x01
    1262:	42 2f       	mov	r20, r18
    1264:	44 0f       	add	r20, r20
    1266:	44 0f       	add	r20, r20
    1268:	50 e1       	ldi	r21, 0x10	; 16
    126a:	95 9f       	mul	r25, r21
    126c:	90 01       	movw	r18, r0
    126e:	11 24       	eor	r1, r1
    1270:	24 2b       	or	r18, r20
    1272:	2d 83       	std	Y+5, r18	; 0x05
    this->sendBufPos++;
  }
}

void USB::selectEndPoint(uint8_t num){
  UENUM  = ((num) & 0x0F);
    1274:	8f 70       	andi	r24, 0x0F	; 15
    1276:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

  b1 = (tp<<6) | dr;
  b2 = (sz<<4) | (bn<<2);
  
  USB::selectEndPoint(num);  
  UECONX |= (1<<EPEN);
    127a:	eb ee       	ldi	r30, 0xEB	; 235
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	81 60       	ori	r24, 0x01	; 1
    1282:	80 83       	st	Z, r24
  
  UECFG1X = 0;
    1284:	ed ee       	ldi	r30, 0xED	; 237
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	10 82       	st	Z, r1
  UECFG0X = b1;
    128a:	8e 81       	ldd	r24, Y+6	; 0x06
    128c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
  UECFG1X = (1<<ALLOC) | b2; 
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	82 60       	ori	r24, 0x02	; 2
    1294:	80 83       	st	Z, r24
  
  return (UESTA0X & (1<<CFGOK))?true:false;
    1296:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
}
    129a:	88 1f       	adc	r24, r24
    129c:	88 27       	eor	r24, r24
    129e:	88 1f       	adc	r24, r24
    12a0:	26 96       	adiw	r28, 0x06	; 6
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	0f 91       	pop	r16
    12b2:	08 95       	ret

000012b4 <_ZN3USB4initEjjfbbbj>:

  while( (PLLCSR & 0x01) == 0)
    ;
}

void USB::init(uint16_t vid, uint16_t pid, float usbVer, bool useString, bool busPower, bool remoteWakeup, uint16_t powerVal){
    12b4:	2f 92       	push	r2
    12b6:	3f 92       	push	r3
    12b8:	4f 92       	push	r4
    12ba:	5f 92       	push	r5
    12bc:	6f 92       	push	r6
    12be:	7f 92       	push	r7
    12c0:	8f 92       	push	r8
    12c2:	9f 92       	push	r9
    12c4:	af 92       	push	r10
    12c6:	cf 92       	push	r12
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <_ZN3USB4initEjjfbbbj+0x22>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <_ZN3USB4initEjjfbbbj+0x24>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	3c 01       	movw	r6, r24
    12de:	1b 01       	movw	r2, r22
    12e0:	2a 01       	movw	r4, r20
    12e2:	09 83       	std	Y+1, r16	; 0x01
    12e4:	1a 83       	std	Y+2, r17	; 0x02
    12e6:	2b 83       	std	Y+3, r18	; 0x03
    12e8:	3c 83       	std	Y+4, r19	; 0x04
  cli();
    12ea:	f8 94       	cli

  this->isEnum = false;
    12ec:	dc 01       	movw	r26, r24
    12ee:	de 96       	adiw	r26, 0x3e	; 62
    12f0:	1c 92       	st	X, r1
  this->initPLL();
    12f2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN3USB7initPLLEv>
  UHWCON   = 0b00000001;
    12f6:	ff 24       	eor	r15, r15
    12f8:	f3 94       	inc	r15
    12fa:	f0 92 d7 00 	sts	0x00D7, r15	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
  USBCON  |= (1<<OTGPADE);
    12fe:	e8 ed       	ldi	r30, 0xD8	; 216
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 61       	ori	r24, 0x10	; 16
    1306:	80 83       	st	Z, r24
  USBCON  |= (1<<USBE) | (1<<FRZCLK);
    1308:	80 81       	ld	r24, Z
    130a:	80 6a       	ori	r24, 0xA0	; 160
    130c:	80 83       	st	Z, r24
  USBCON &= ~(1<<FRZCLK);               // UNFREEZE;
    130e:	80 81       	ld	r24, Z
    1310:	8f 7d       	andi	r24, 0xDF	; 223
    1312:	80 83       	st	Z, r24

  //_delay_ms(10);

  UDCON &= ~(1<<DETACH);                // ATTACH;
    1314:	e0 ee       	ldi	r30, 0xE0	; 224
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8e 7f       	andi	r24, 0xFE	; 254
    131c:	80 83       	st	Z, r24

  UDIEN = (1<<EORSTE); 
    131e:	88 e0       	ldi	r24, 0x08	; 8
    1320:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

  this->useStr = useString;
    1324:	f3 01       	movw	r30, r6
    1326:	e7 ae       	std	Z+63, r14	; 0x3f
  float mul     = usbVer * 10;
  uint8_t hiVer = (uint8_t)usbVer;
    1328:	69 81       	ldd	r22, Y+1	; 0x01
    132a:	7a 81       	ldd	r23, Y+2	; 0x02
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
  uint8_t loVer = (uint8_t)((mul - hiVer*10))<<4;
    1334:	06 2f       	mov	r16, r22
    1336:	10 e0       	ldi	r17, 0x00	; 0

  this->device.len                    = sizeof(device);
    1338:	82 e1       	ldi	r24, 0x12	; 18
    133a:	d3 01       	movw	r26, r6
    133c:	50 96       	adiw	r26, 0x10	; 16
    133e:	8c 93       	st	X, r24
    1340:	50 97       	sbiw	r26, 0x10	; 16
  this->device.dtype                  = 0x01;
    1342:	51 96       	adiw	r26, 0x11	; 17
    1344:	fc 92       	st	X, r15
  UDCON &= ~(1<<DETACH);                // ATTACH;

  UDIEN = (1<<EORSTE); 

  this->useStr = useString;
  float mul     = usbVer * 10;
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	69 81       	ldd	r22, Y+1	; 0x01
    1350:	7a 81       	ldd	r23, Y+2	; 0x02
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__mulsf3>
    135a:	69 83       	std	Y+1, r22	; 0x01
    135c:	7a 83       	std	Y+2, r23	; 0x02
    135e:	8b 83       	std	Y+3, r24	; 0x03
    1360:	9c 83       	std	Y+4, r25	; 0x04
  uint8_t hiVer = (uint8_t)usbVer;
  uint8_t loVer = (uint8_t)((mul - hiVer*10))<<4;
    1362:	b8 01       	movw	r22, r16
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	c8 01       	movw	r24, r16
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	68 0f       	add	r22, r24
    1378:	79 1f       	adc	r23, r25
    137a:	07 2e       	mov	r0, r23
    137c:	00 0c       	add	r0, r0
    137e:	88 0b       	sbc	r24, r24
    1380:	99 0b       	sbc	r25, r25
    1382:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__floatsisf>
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	69 81       	ldd	r22, Y+1	; 0x01
    138c:	7a 81       	ldd	r23, Y+2	; 0x02
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__subsf3>
    1396:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixunssfsi>
    139a:	62 95       	swap	r22
    139c:	60 7f       	andi	r22, 0xF0	; 240

  this->device.len                    = sizeof(device);
  this->device.dtype                  = 0x01;
  this->device.usbVersion             = (hiVer<<8) | loVer;
    139e:	10 2f       	mov	r17, r16
    13a0:	00 27       	eor	r16, r16
    13a2:	06 2b       	or	r16, r22
    13a4:	f3 01       	movw	r30, r6
    13a6:	13 8b       	std	Z+19, r17	; 0x13
    13a8:	02 8b       	std	Z+18, r16	; 0x12
  this->device.deviceClass            = 0x00;
    13aa:	14 8a       	std	Z+20, r1	; 0x14
  this->device.deviceSubClass         = 0x00;
    13ac:	15 8a       	std	Z+21, r1	; 0x15
  this->device.deviceProtocol         = 0x00;
    13ae:	16 8a       	std	Z+22, r1	; 0x16
  this->device.packetSize0            = 64;
    13b0:	80 e4       	ldi	r24, 0x40	; 64
    13b2:	87 8b       	std	Z+23, r24	; 0x17
  this->device.idVendor               = vid;
    13b4:	31 8e       	std	Z+25, r3	; 0x19
    13b6:	20 8e       	std	Z+24, r2	; 0x18
  this->device.idProduct              = pid;
    13b8:	53 8e       	std	Z+27, r5	; 0x1b
    13ba:	42 8e       	std	Z+26, r4	; 0x1a
  this->device.deviceVersion          = 0x0101;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	95 8f       	std	Z+29, r25	; 0x1d
    13c2:	84 8f       	std	Z+28, r24	; 0x1c
bool  USB::isEnumerate(){
  return this->isEnum;
}

uint8_t  USB::getStrId(){
  return (this->useStr?++this->stringCounter:0);
    13c4:	ee 20       	and	r14, r14
    13c6:	09 f4       	brne	.+2      	; 0x13ca <_ZN3USB4initEjjfbbbj+0x116>
    13c8:	4c c0       	rjmp	.+152    	; 0x1462 <_ZN3USB4initEjjfbbbj+0x1ae>
    13ca:	ed 5b       	subi	r30, 0xBD	; 189
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	80 81       	ld	r24, Z
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
  this->device.deviceProtocol         = 0x00;
  this->device.packetSize0            = 64;
  this->device.idVendor               = vid;
  this->device.idProduct              = pid;
  this->device.deviceVersion          = 0x0101;
  this->device.iManufacturer          = this->getStrId();
    13d2:	d3 01       	movw	r26, r6
    13d4:	5e 96       	adiw	r26, 0x1e	; 30
    13d6:	8c 93       	st	X, r24
    13d8:	5e 97       	sbiw	r26, 0x1e	; 30
bool  USB::isEnumerate(){
  return this->isEnum;
}

uint8_t  USB::getStrId(){
  return (this->useStr?++this->stringCounter:0);
    13da:	8f 5f       	subi	r24, 0xFF	; 255
  this->device.packetSize0            = 64;
  this->device.idVendor               = vid;
  this->device.idProduct              = pid;
  this->device.deviceVersion          = 0x0101;
  this->device.iManufacturer          = this->getStrId();
  this->device.iProduct               = this->getStrId();
    13dc:	5f 96       	adiw	r26, 0x1f	; 31
    13de:	8c 93       	st	X, r24
bool  USB::isEnumerate(){
  return this->isEnum;
}

uint8_t  USB::getStrId(){
  return (this->useStr?++this->stringCounter:0);
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	80 83       	st	Z, r24
  this->device.idVendor               = vid;
  this->device.idProduct              = pid;
  this->device.deviceVersion          = 0x0101;
  this->device.iManufacturer          = this->getStrId();
  this->device.iProduct               = this->getStrId();
  this->device.iSerialNumber          = this->getStrId();
    13e4:	f3 01       	movw	r30, r6
    13e6:	80 a3       	std	Z+32, r24	; 0x20
  this->device.bNumConfigurations     = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	81 a3       	std	Z+33, r24	; 0x21

  qDevice.bLength             = sizeof(USB_Device_Qualifer_Descriptor);
    13ec:	9a e0       	ldi	r25, 0x0A	; 10
    13ee:	92 a3       	std	Z+34, r25	; 0x22
  qDevice.bDescriptorType     = 0x06;  
    13f0:	96 e0       	ldi	r25, 0x06	; 6
    13f2:	93 a3       	std	Z+35, r25	; 0x23
  qDevice.bcdUSB              = (hiVer<<8)|loVer;
    13f4:	15 a3       	std	Z+37, r17	; 0x25
    13f6:	04 a3       	std	Z+36, r16	; 0x24
  qDevice.bDeviceClass        = 0x00;
    13f8:	16 a2       	std	Z+38, r1	; 0x26
  qDevice.bDeviceSubClass     = 0x00;
    13fa:	17 a2       	std	Z+39, r1	; 0x27
  qDevice.bDeviceProtocol     = 0x00;
    13fc:	10 a6       	std	Z+40, r1	; 0x28
  qDevice.bMaxPacketSize0     = 64;
    13fe:	90 e4       	ldi	r25, 0x40	; 64
    1400:	91 a7       	std	Z+41, r25	; 0x29
  qDevice.bNumConfigurations  = 1;
    1402:	82 a7       	std	Z+42, r24	; 0x2a
  qDevice.bReserved           = 0;
    1404:	13 a6       	std	Z+43, r1	; 0x2b

  initConfiguration(busPower, remoteWakeup, powerVal);
    1406:	94 01       	movw	r18, r8
    1408:	4a 2d       	mov	r20, r10
    140a:	6c 2d       	mov	r22, r12
    140c:	c3 01       	movw	r24, r6
    140e:	0e 94 b2 07 	call	0xf64	; 0xf64 <_ZN3USB17initConfigurationEbbj>
  initInterface();
    1412:	c3 01       	movw	r24, r6
    1414:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_ZN3USB13initInterfaceEv>

  memset(&epDescriptors,0, sizeof(USB_Endpoint_Descriptor) * 7);
    1418:	81 e3       	ldi	r24, 0x31	; 49
    141a:	f3 01       	movw	r30, r6
    141c:	e7 54       	subi	r30, 0x47	; 71
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	df 01       	movw	r26, r30
    1422:	1d 92       	st	X+, r1
    1424:	8a 95       	dec	r24
    1426:	e9 f7       	brne	.-6      	; 0x1422 <_ZN3USB4initEjjfbbbj+0x16e>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0

  for(uint8_t i=0; i<7;i++){    
    epEvents[i] = NULL;
    142c:	fc 01       	movw	r30, r24
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	e6 0d       	add	r30, r6
    1434:	f7 1d       	adc	r31, r7
    1436:	e5 55       	subi	r30, 0x55	; 85
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	11 82       	std	Z+1, r1	; 0x01
    143c:	10 82       	st	Z, r1
    143e:	01 96       	adiw	r24, 0x01	; 1
  initConfiguration(busPower, remoteWakeup, powerVal);
  initInterface();

  memset(&epDescriptors,0, sizeof(USB_Endpoint_Descriptor) * 7);

  for(uint8_t i=0; i<7;i++){    
    1440:	87 30       	cpi	r24, 0x07	; 7
    1442:	91 05       	cpc	r25, r1
    1444:	99 f7       	brne	.-26     	; 0x142c <_ZN3USB4initEjjfbbbj+0x178>
    epEvents[i] = NULL;
  }
  epCounter = 1;
    1446:	f3 01       	movw	r30, r6
    1448:	ec 5b       	subi	r30, 0xBC	; 188
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	80 83       	st	Z, r24
  initInternalEndpoint(0, CONTROL,IN,SIZE64,ONE);
    1450:	00 e0       	ldi	r16, 0x00	; 0
    1452:	23 e0       	ldi	r18, 0x03	; 3
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN3USB20initInternalEndpointEh6upType11upDirection6upSize6upBank>
  sei();
    145e:	78 94       	sei
    1460:	05 c0       	rjmp	.+10     	; 0x146c <_ZN3USB4initEjjfbbbj+0x1b8>
  this->device.deviceProtocol         = 0x00;
  this->device.packetSize0            = 64;
  this->device.idVendor               = vid;
  this->device.idProduct              = pid;
  this->device.deviceVersion          = 0x0101;
  this->device.iManufacturer          = this->getStrId();
    1462:	f3 01       	movw	r30, r6
    1464:	16 8e       	std	Z+30, r1	; 0x1e
  this->device.iProduct               = this->getStrId();
    1466:	17 8e       	std	Z+31, r1	; 0x1f
bool  USB::isEnumerate(){
  return this->isEnum;
}

uint8_t  USB::getStrId(){
  return (this->useStr?++this->stringCounter:0);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	bc cf       	rjmp	.-136    	; 0x13e4 <_ZN3USB4initEjjfbbbj+0x130>
    epEvents[i] = NULL;
  }
  epCounter = 1;
  initInternalEndpoint(0, CONTROL,IN,SIZE64,ONE);
  sei();
}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	cf 90       	pop	r12
    1482:	af 90       	pop	r10
    1484:	9f 90       	pop	r9
    1486:	8f 90       	pop	r8
    1488:	7f 90       	pop	r7
    148a:	6f 90       	pop	r6
    148c:	5f 90       	pop	r5
    148e:	4f 90       	pop	r4
    1490:	3f 90       	pop	r3
    1492:	2f 90       	pop	r2
    1494:	08 95       	ret

00001496 <_ZN3USB17activateEndpointsEv>:
  
  sei();
  return true;
}

void USB::activateEndpoints(void){
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	ec 01       	movw	r28, r24
    14a6:	ca 50       	subi	r28, 0x0A	; 10
    14a8:	df 4f       	sbci	r29, 0xFF	; 255
  for(uint8_t i=1;i<7;i++){
    14aa:	11 e0       	ldi	r17, 0x01	; 1
    if( ep.init != 0 ){
      initInternalEndpoint(i,ep.type,ep.dir,ep.size,ep.bank);
      if( ep.dir == OUT ){
        UEIENX |= (1<<RXOUTE);
      } else {
        UEIENX |= (1<< TXINE);
    14ac:	0f 2e       	mov	r0, r31
    14ae:	f0 ef       	ldi	r31, 0xF0	; 240
    14b0:	ef 2e       	mov	r14, r31
    14b2:	f1 2c       	mov	r15, r1
    14b4:	f0 2d       	mov	r31, r0
    14b6:	fe 01       	movw	r30, r28
    14b8:	33 97       	sbiw	r30, 0x03	; 3
  return true;
}

void USB::activateEndpoints(void){
  for(uint8_t i=1;i<7;i++){
    USB_Endpoint_Definition ep = epDefinitions[i];
    14ba:	60 81       	ld	r22, Z
    14bc:	31 96       	adiw	r30, 0x01	; 1
    14be:	d0 80       	ld	r13, Z
    14c0:	31 96       	adiw	r30, 0x01	; 1
    14c2:	20 81       	ld	r18, Z
    14c4:	08 81       	ld	r16, Y
    14c6:	33 97       	sbiw	r30, 0x03	; 3
    if( ep.init != 0 ){
    14c8:	80 81       	ld	r24, Z
    14ca:	88 23       	and	r24, r24
    14cc:	79 f0       	breq	.+30     	; 0x14ec <_ZN3USB17activateEndpointsEv+0x56>
      initInternalEndpoint(i,ep.type,ep.dir,ep.size,ep.bank);
    14ce:	4d 2d       	mov	r20, r13
    14d0:	81 2f       	mov	r24, r17
    14d2:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN3USB20initInternalEndpointEh6upType11upDirection6upSize6upBank>
      if( ep.dir == OUT ){
    14d6:	d1 10       	cpse	r13, r1
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <_ZN3USB17activateEndpointsEv+0x4e>
        UEIENX |= (1<<RXOUTE);
    14da:	f7 01       	movw	r30, r14
    14dc:	80 81       	ld	r24, Z
    14de:	84 60       	ori	r24, 0x04	; 4
    14e0:	80 83       	st	Z, r24
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <_ZN3USB17activateEndpointsEv+0x56>
      } else {
        UEIENX |= (1<< TXINE);
    14e4:	f7 01       	movw	r30, r14
    14e6:	80 81       	ld	r24, Z
    14e8:	81 60       	ori	r24, 0x01	; 1
    14ea:	80 83       	st	Z, r24
  sei();
  return true;
}

void USB::activateEndpoints(void){
  for(uint8_t i=1;i<7;i++){
    14ec:	1f 5f       	subi	r17, 0xFF	; 255
    14ee:	28 96       	adiw	r28, 0x08	; 8
    14f0:	17 30       	cpi	r17, 0x07	; 7
    14f2:	09 f7       	brne	.-62     	; 0x14b6 <_ZN3USB17activateEndpointsEv+0x20>
      } else {
        UEIENX |= (1<< TXINE);
      }
    }
  }
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	ef 90       	pop	r14
    1500:	df 90       	pop	r13
    1502:	08 95       	ret

00001504 <_ZN3USB5eorstEv>:

inline void  sof(void){

}

void USB::eorst(){   
    1504:	0f 93       	push	r16
  initInternalEndpoint(0,CONTROL,OUT,SIZE64,ONE);
    1506:	00 e0       	ldi	r16, 0x00	; 0
    1508:	23 e0       	ldi	r18, 0x03	; 3
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN3USB20initInternalEndpointEh6upType11upDirection6upSize6upBank>
    this->sendBufPos++;
  }
}

void USB::selectEndPoint(uint8_t num){
  UENUM  = ((num) & 0x0F);
    1514:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}

void USB::eorst(){   
  initInternalEndpoint(0,CONTROL,OUT,SIZE64,ONE);
  selectEndPoint(0);
  UEIENX = (1 << RXSTPE);  
    1518:	88 e0       	ldi	r24, 0x08	; 8
    151a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
}
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <_ZN3USB16registerCallbackEhPFbPvE>:
  UECFG1X = (1<<ALLOC) | b2; 
  
  return (UESTA0X & (1<<CFGOK))?true:false;
}

void USB::registerCallback(uint8_t num, functptr funct){
    1522:	fc 01       	movw	r30, r24
  if( (num ==0) | (num > 6) ){
    1524:	9f ef       	ldi	r25, 0xFF	; 255
    1526:	96 0f       	add	r25, r22
    1528:	96 30       	cpi	r25, 0x06	; 6
    152a:	58 f4       	brcc	.+22     	; 0x1542 <_ZN3USB16registerCallbackEhPFbPvE+0x20>
    return;
  }

  epEvents[num] = funct;
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	cf 01       	movw	r24, r30
    1534:	86 0f       	add	r24, r22
    1536:	97 1f       	adc	r25, r23
    1538:	fc 01       	movw	r30, r24
    153a:	e5 55       	subi	r30, 0x55	; 85
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	51 83       	std	Z+1, r21	; 0x01
    1540:	40 83       	st	Z, r20
    1542:	08 95       	ret

00001544 <_ZN3USB23registerControlCallbackEPFbPv18USB_Request_HeaderE>:
}

void USB::registerControlCallback(functCtrlptr funct){
  this->extendControl = funct;
    1544:	fc 01       	movw	r30, r24
    1546:	e7 55       	subi	r30, 0x57	; 87
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	71 83       	std	Z+1, r23	; 0x01
    154c:	60 83       	st	Z, r22
    154e:	08 95       	ret

00001550 <_ZN3USB10onGenEventEPS_>:
  UEIENX |= (1 << RXSTPE);  

}

void USB::onGenEvent(USB *handle){
  uint8_t state = UDINT;
    1550:	e1 ee       	ldi	r30, 0xE1	; 225
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
  UDINT = 0;
    1556:	10 82       	st	Z, r1
  
  if( state & (1<<EORSTI) ){
    1558:	83 fd       	sbrc	r24, 3
    handle->eorst();
    155a:	0e 94 82 0a 	call	0x1504	; 0x1504 <_ZN3USB5eorstEv>
    155e:	08 95       	ret

00001560 <_ZN3USB9getStatusEv>:
    }
  }
  selectEndPoint(handle->currentEndpoins);
}

bool USB::getStatus(){
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	00 d0       	rcall	.+0      	; 0x1566 <_ZN3USB9getStatusEv+0x6>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
  uint8_t status[2] = {0,0};
    156a:	19 82       	std	Y+1, r1	; 0x01
    156c:	1a 82       	std	Y+2, r1	; 0x02
  writeBuf((const uint8_t*)&status,2,controlHeader.wLengthL);
    156e:	fc 01       	movw	r30, r24
    1570:	26 81       	ldd	r18, Z+6	; 0x06
    1572:	42 e0       	ldi	r20, 0x02	; 2
    1574:	be 01       	movw	r22, r28
    1576:	6f 5f       	subi	r22, 0xFF	; 255
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN3USB8writeBufEPKhhh>
  return true;
}
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <_ZN3USB9setAddresEv>:

bool USB::setAddres(){   
   UDADDR  = controlHeader.wValueL;
    158a:	fc 01       	movw	r30, r24
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	e3 ee       	ldi	r30, 0xE3	; 227
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 83       	st	Z, r24
   UDADDR |= (1<<ADDEN);
    1594:	80 81       	ld	r24, Z
    1596:	80 68       	ori	r24, 0x80	; 128
    1598:	80 83       	st	Z, r24
   return true;
}
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	08 95       	ret

0000159e <_ZN3USB13getDescriptorEv>:

bool  USB::getDescriptor(){
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	8c 01       	movw	r16, r24
  switch( controlHeader.wValueH ){
    15ac:	fc 01       	movw	r30, r24
    15ae:	83 81       	ldd	r24, Z+3	; 0x03
    15b0:	82 30       	cpi	r24, 0x02	; 2
    15b2:	71 f0       	breq	.+28     	; 0x15d0 <_ZN3USB13getDescriptorEv+0x32>
    15b4:	86 30       	cpi	r24, 0x06	; 6
    15b6:	a9 f1       	breq	.+106    	; 0x1622 <_ZN3USB13getDescriptorEv+0x84>
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	f1 f5       	brne	.+124    	; 0x1638 <_ZN3USB13getDescriptorEv+0x9a>
    case GET_DESCRIPTOR_DEVICE:
      writeBuf((const uint8_t*)&device,sizeof(USB_Device_Descriptor), this->controlHeader.wLengthL);
    15bc:	b8 01       	movw	r22, r16
    15be:	60 5f       	subi	r22, 0xF0	; 240
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	26 81       	ldd	r18, Z+6	; 0x06
    15c4:	42 e1       	ldi	r20, 0x12	; 18
    15c6:	c8 01       	movw	r24, r16
    15c8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN3USB8writeBufEPKhhh>
      writeBuf((const uint8_t*)&qDevice,sizeof(USB_Device_Qualifer_Descriptor), controlHeader.wLengthL);            
    break;
    default:
      return false;
  }
  return true;
    15cc:	81 e0       	ldi	r24, 0x01	; 1

bool  USB::getDescriptor(){
  switch( controlHeader.wValueH ){
    case GET_DESCRIPTOR_DEVICE:
      writeBuf((const uint8_t*)&device,sizeof(USB_Device_Descriptor), this->controlHeader.wLengthL);
    break;
    15ce:	35 c0       	rjmp	.+106    	; 0x163a <_ZN3USB13getDescriptorEv+0x9c>
    case GET_DESCRIPTOR_CONFIG:
      writeBuf((const uint8_t*)&config, sizeof(USB_Config_Descriptor),    this->controlHeader.wLengthL);
    15d0:	f8 01       	movw	r30, r16
    15d2:	26 81       	ldd	r18, Z+6	; 0x06
    15d4:	49 e0       	ldi	r20, 0x09	; 9
    15d6:	b8 01       	movw	r22, r16
    15d8:	64 5d       	subi	r22, 0xD4	; 212
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	c8 01       	movw	r24, r16
    15de:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN3USB8writeBufEPKhhh>
      writeBuf((const uint8_t*)&iface,  sizeof(USB_Interface_Descriptor), this->controlHeader.wLengthL);
    15e2:	f8 01       	movw	r30, r16
    15e4:	26 81       	ldd	r18, Z+6	; 0x06
    15e6:	49 e0       	ldi	r20, 0x09	; 9
    15e8:	b8 01       	movw	r22, r16
    15ea:	6b 5c       	subi	r22, 0xCB	; 203
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	c8 01       	movw	r24, r16
    15f0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN3USB8writeBufEPKhhh>
    15f4:	e8 01       	movw	r28, r16
    15f6:	c0 54       	subi	r28, 0x40	; 64
    15f8:	df 4f       	sbci	r29, 0xFF	; 255
    15fa:	78 01       	movw	r14, r16
    15fc:	fa ee       	ldi	r31, 0xEA	; 234
    15fe:	ef 0e       	add	r14, r31
    1600:	f1 1c       	adc	r15, r1
      for(uint8_t pos = 1; pos<7;pos++){
        if( epDescriptors[pos].bLength != 0){
    1602:	88 81       	ld	r24, Y
    1604:	88 23       	and	r24, r24
    1606:	39 f0       	breq	.+14     	; 0x1616 <_ZN3USB13getDescriptorEv+0x78>
          writeBuf((const uint8_t*)&epDescriptors[pos],  sizeof(USB_Endpoint_Descriptor), this->controlHeader.wLengthL);
    1608:	f8 01       	movw	r30, r16
    160a:	26 81       	ldd	r18, Z+6	; 0x06
    160c:	47 e0       	ldi	r20, 0x07	; 7
    160e:	be 01       	movw	r22, r28
    1610:	c8 01       	movw	r24, r16
    1612:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN3USB8writeBufEPKhhh>
    1616:	27 96       	adiw	r28, 0x07	; 7
      writeBuf((const uint8_t*)&device,sizeof(USB_Device_Descriptor), this->controlHeader.wLengthL);
    break;
    case GET_DESCRIPTOR_CONFIG:
      writeBuf((const uint8_t*)&config, sizeof(USB_Config_Descriptor),    this->controlHeader.wLengthL);
      writeBuf((const uint8_t*)&iface,  sizeof(USB_Interface_Descriptor), this->controlHeader.wLengthL);
      for(uint8_t pos = 1; pos<7;pos++){
    1618:	ce 15       	cp	r28, r14
    161a:	df 05       	cpc	r29, r15
    161c:	91 f7       	brne	.-28     	; 0x1602 <_ZN3USB13getDescriptorEv+0x64>
      writeBuf((const uint8_t*)&qDevice,sizeof(USB_Device_Qualifer_Descriptor), controlHeader.wLengthL);            
    break;
    default:
      return false;
  }
  return true;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	0c c0       	rjmp	.+24     	; 0x163a <_ZN3USB13getDescriptorEv+0x9c>
    break;
    case GET_DESCRIPTOR_STRING:      
      return false;
    break;
    case GET_DESCRIPTOR_QUALIFER:
      writeBuf((const uint8_t*)&qDevice,sizeof(USB_Device_Qualifer_Descriptor), controlHeader.wLengthL);            
    1622:	b8 01       	movw	r22, r16
    1624:	6e 5d       	subi	r22, 0xDE	; 222
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	f8 01       	movw	r30, r16
    162a:	26 81       	ldd	r18, Z+6	; 0x06
    162c:	4a e0       	ldi	r20, 0x0A	; 10
    162e:	c8 01       	movw	r24, r16
    1630:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN3USB8writeBufEPKhhh>
    break;
    default:
      return false;
  }
  return true;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    case GET_DESCRIPTOR_STRING:      
      return false;
    break;
    case GET_DESCRIPTOR_QUALIFER:
      writeBuf((const uint8_t*)&qDevice,sizeof(USB_Device_Qualifer_Descriptor), controlHeader.wLengthL);            
    break;
    1636:	01 c0       	rjmp	.+2      	; 0x163a <_ZN3USB13getDescriptorEv+0x9c>
          writeBuf((const uint8_t*)&epDescriptors[pos],  sizeof(USB_Endpoint_Descriptor), this->controlHeader.wLengthL);
        }
      }      
    break;
    case GET_DESCRIPTOR_STRING:      
      return false;
    1638:	80 e0       	ldi	r24, 0x00	; 0
    break;
    default:
      return false;
  }
  return true;
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	08 95       	ret

00001648 <_ZN3USB10onComEventEPS_>:
  if( state & (1<<EORSTI) ){
    handle->eorst();
  }  
}

void USB::onComEvent(USB *handle){  
    1648:	6f 92       	push	r6
    164a:	7f 92       	push	r7
    164c:	8f 92       	push	r8
    164e:	9f 92       	push	r9
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	1f 92       	push	r1
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	3c 01       	movw	r6, r24
  uint8_t pos, mask;
  
  handle->activeEP = UEINT;
    166c:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
    1670:	f3 01       	movw	r30, r6
    1672:	ef 5b       	subi	r30, 0xBF	; 191
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 83       	st	Z, r24
  handle->currentEndpoins = UENUM;
    1678:	e9 ee       	ldi	r30, 0xE9	; 233
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	d3 01       	movw	r26, r6
    1680:	a0 5c       	subi	r26, 0xC0	; 192
    1682:	bf 4f       	sbci	r27, 0xFF	; 255
    1684:	8c 93       	st	X, r24
    this->sendBufPos++;
  }
}

void USB::selectEndPoint(uint8_t num){
  UENUM  = ((num) & 0x0F);
    1686:	10 82       	st	Z, r1
}

inline void USB::ControlRequest(){
  selectEndPoint(0);

  volatile uint8_t intStatus = UEINTX;  
    1688:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    168c:	89 83       	std	Y+1, r24	; 0x01

  if( (intStatus & (1<<RXSTPI)) == 0 ){    
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	83 ff       	sbrs	r24, 3
    1692:	b7 c0       	rjmp	.+366    	; 0x1802 <_ZN3USB10onComEventEPS_+0x1ba>
    return;
  }

  UEIENX &= ~(1<<RXSTPE);       
    1694:	e0 ef       	ldi	r30, 0xF0	; 240
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	87 7f       	andi	r24, 0xF7	; 247
    169c:	80 83       	st	Z, r24
  uint16_t cnt = UEBCX;
    169e:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    16a2:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
  this->readBuf((uint8_t*)&this->controlHeader,(uint8_t)cnt);  
    16a6:	b3 01       	movw	r22, r6
    16a8:	c3 01       	movw	r24, r6
    16aa:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_ZN3USB7readBufEPhh>
  UEINTX = ~( (1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI) );
    16ae:	82 ef       	ldi	r24, 0xF2	; 242
    16b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
  sei();
    16b4:	78 94       	sei

  if( (controlHeader.bmRequestType & 0x80) == 0x80 ) { waitIn(); } else { clearIn(); };    
    16b6:	d3 01       	movw	r26, r6
    16b8:	8c 91       	ld	r24, X
    16ba:	88 23       	and	r24, r24
    16bc:	24 f4       	brge	.+8      	; 0x16c6 <_ZN3USB10onComEventEPS_+0x7e>
    16be:	c3 01       	movw	r24, r6
    16c0:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN3USB6waitInEv>
    16c4:	90 c0       	rjmp	.+288    	; 0x17e6 <_ZN3USB10onComEventEPS_+0x19e>
    16c6:	c3 01       	movw	r24, r6
    16c8:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN3USB7clearInEv>
    16cc:	8c c0       	rjmp	.+280    	; 0x17e6 <_ZN3USB10onComEventEPS_+0x19e>

  bool accepted = true;  
  switch(controlHeader.bRequest){
    case GET_STATUS:      
        accepted = this->getStatus();
    16ce:	c3 01       	movw	r24, r6
    16d0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN3USB9getStatusEv>
    16d4:	50 c0       	rjmp	.+160    	; 0x1776 <_ZN3USB10onComEventEPS_+0x12e>
      break;
    case CLEAR_FEATURE:
//        accepted = this->clearFeature();
        nop();
    16d6:	00 00       	nop
    16d8:	50 c0       	rjmp	.+160    	; 0x177a <_ZN3USB10onComEventEPS_+0x132>
      break;
    case SET_FEATURE:
//        accepted = this->setFeature();
        nop();
    16da:	00 00       	nop
    16dc:	4e c0       	rjmp	.+156    	; 0x177a <_ZN3USB10onComEventEPS_+0x132>
      break;
    case SET_ADDRESS:
        waitIn();
    16de:	c3 01       	movw	r24, r6
    16e0:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN3USB6waitInEv>
        accepted = this->setAddres();
    16e4:	c3 01       	movw	r24, r6
    16e6:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN3USB9setAddresEv>
    16ea:	45 c0       	rjmp	.+138    	; 0x1776 <_ZN3USB10onComEventEPS_+0x12e>
      break;
    case GET_DESCRIPTOR:
        accepted = this->getDescriptor();
    16ec:	c3 01       	movw	r24, r6
    16ee:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN3USB13getDescriptorEv>
    16f2:	41 c0       	rjmp	.+130    	; 0x1776 <_ZN3USB10onComEventEPS_+0x12e>
bool  getConfiguration(){
  return false;
}

bool USB::setConfiguration(){
  activateEndpoints();
    16f4:	c3 01       	movw	r24, r6
    16f6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN3USB17activateEndpointsEv>
  this->isEnum = true;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	f3 01       	movw	r30, r6
    16fe:	86 af       	std	Z+62, r24	; 0x3e
    1700:	3c c0       	rjmp	.+120    	; 0x177a <_ZN3USB10onComEventEPS_+0x132>
    case GET_INTERFACE:
    case SET_INTERFACE:
        accepted = false;        
      break;
    default:
      if( this->extendControl != 0){
    1702:	f3 01       	movw	r30, r6
    1704:	e7 55       	subi	r30, 0x57	; 87
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	89 2b       	or	r24, r25
    170e:	c9 f1       	breq	.+114    	; 0x1782 <_ZN3USB10onComEventEPS_+0x13a>
        accepted = extendControl(this, this->controlHeader);
    1710:	01 90       	ld	r0, Z+
    1712:	f0 81       	ld	r31, Z
    1714:	e0 2d       	mov	r30, r0
    1716:	d3 01       	movw	r26, r6
    1718:	8c 90       	ld	r8, X
    171a:	11 96       	adiw	r26, 0x01	; 1
    171c:	9c 90       	ld	r9, X
    171e:	11 97       	sbiw	r26, 0x01	; 1
    1720:	12 96       	adiw	r26, 0x02	; 2
    1722:	ac 90       	ld	r10, X
    1724:	12 97       	sbiw	r26, 0x02	; 2
    1726:	13 96       	adiw	r26, 0x03	; 3
    1728:	bc 90       	ld	r11, X
    172a:	13 97       	sbiw	r26, 0x03	; 3
    172c:	14 96       	adiw	r26, 0x04	; 4
    172e:	cc 90       	ld	r12, X
    1730:	14 97       	sbiw	r26, 0x04	; 4
    1732:	15 96       	adiw	r26, 0x05	; 5
    1734:	dc 90       	ld	r13, X
    1736:	15 97       	sbiw	r26, 0x05	; 5
    1738:	16 96       	adiw	r26, 0x06	; 6
    173a:	ec 90       	ld	r14, X
    173c:	16 97       	sbiw	r26, 0x06	; 6
    173e:	17 96       	adiw	r26, 0x07	; 7
    1740:	fc 90       	ld	r15, X
    1742:	17 97       	sbiw	r26, 0x07	; 7
    1744:	18 96       	adiw	r26, 0x08	; 8
    1746:	0c 91       	ld	r16, X
    1748:	18 97       	sbiw	r26, 0x08	; 8
    174a:	19 96       	adiw	r26, 0x09	; 9
    174c:	1c 91       	ld	r17, X
    174e:	19 97       	sbiw	r26, 0x09	; 9
    1750:	1a 96       	adiw	r26, 0x0a	; 10
    1752:	2c 91       	ld	r18, X
    1754:	1a 97       	sbiw	r26, 0x0a	; 10
    1756:	1b 96       	adiw	r26, 0x0b	; 11
    1758:	3c 91       	ld	r19, X
    175a:	1b 97       	sbiw	r26, 0x0b	; 11
    175c:	1c 96       	adiw	r26, 0x0c	; 12
    175e:	4c 91       	ld	r20, X
    1760:	1c 97       	sbiw	r26, 0x0c	; 12
    1762:	1d 96       	adiw	r26, 0x0d	; 13
    1764:	5c 91       	ld	r21, X
    1766:	1d 97       	sbiw	r26, 0x0d	; 13
    1768:	1e 96       	adiw	r26, 0x0e	; 14
    176a:	6c 91       	ld	r22, X
    176c:	1e 97       	sbiw	r26, 0x0e	; 14
    176e:	1f 96       	adiw	r26, 0x0f	; 15
    1770:	7c 91       	ld	r23, X
    1772:	c3 01       	movw	r24, r6
    1774:	09 95       	icall
      } else {
        accepted = false;
      }
  }
  if( accepted ){
    1776:	88 23       	and	r24, r24
    1778:	21 f0       	breq	.+8      	; 0x1782 <_ZN3USB10onComEventEPS_+0x13a>
    clearIn(); 
    177a:	c3 01       	movw	r24, r6
    177c:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN3USB7clearInEv>
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <_ZN3USB10onComEventEPS_+0x140>
  } else {
    this->stall();
    1782:	c3 01       	movw	r24, r6
    1784:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN3USB5stallEv>
    this->sendBufPos++;
  }
}

void USB::selectEndPoint(uint8_t num){
  UENUM  = ((num) & 0x0F);
    1788:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    clearIn(); 
  } else {
    this->stall();
  }  
  selectEndPoint(0);
  UEIENX |= (1 << RXSTPE);  
    178c:	e0 ef       	ldi	r30, 0xF0	; 240
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 60       	ori	r24, 0x08	; 8
    1794:	80 83       	st	Z, r24
    1796:	35 c0       	rjmp	.+106    	; 0x1802 <_ZN3USB10onComEventEPS_+0x1ba>
    1798:	30 2f       	mov	r19, r16
  handle->activeEP = UEINT;
  handle->currentEndpoins = UENUM;
  handle->ControlRequest();  
 
  for(pos = 1;pos<7;pos++){
    mask = (1<<pos);
    179a:	a8 01       	movw	r20, r16
    if( ((handle->activeEP & mask) == mask) && (handle->epEvents[pos] != 0)) {
    179c:	f7 01       	movw	r30, r14
    179e:	20 81       	ld	r18, Z
    17a0:	c6 01       	movw	r24, r12
    17a2:	00 2e       	mov	r0, r16
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <_ZN3USB10onComEventEPS_+0x162>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <_ZN3USB10onComEventEPS_+0x15e>
    17ae:	92 2f       	mov	r25, r18
    17b0:	98 23       	and	r25, r24
    17b2:	98 13       	cpse	r25, r24
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <_ZN3USB10onComEventEPS_+0x184>
    17b6:	f8 01       	movw	r30, r16
    17b8:	ee 0f       	add	r30, r30
    17ba:	ff 1f       	adc	r31, r31
    17bc:	e6 0d       	add	r30, r6
    17be:	f7 1d       	adc	r31, r7
    17c0:	e5 55       	subi	r30, 0x55	; 85
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	89 2b       	or	r24, r25
    17ca:	51 f5       	brne	.+84     	; 0x1820 <_ZN3USB10onComEventEPS_+0x1d8>
    17cc:	0f 5f       	subi	r16, 0xFF	; 255
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
  
  handle->activeEP = UEINT;
  handle->currentEndpoins = UENUM;
  handle->ControlRequest();  
 
  for(pos = 1;pos<7;pos++){
    17d0:	07 30       	cpi	r16, 0x07	; 7
    17d2:	11 05       	cpc	r17, r1
    17d4:	09 f7       	brne	.-62     	; 0x1798 <_ZN3USB10onComEventEPS_+0x150>
      USB::selectEndPoint(pos);
      handle->epEvents[pos](handle);
      handle->clearIn();      
    }
  }
  selectEndPoint(handle->currentEndpoins);
    17d6:	f3 01       	movw	r30, r6
    17d8:	e0 5c       	subi	r30, 0xC0	; 192
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    this->sendBufPos++;
  }
}

void USB::selectEndPoint(uint8_t num){
  UENUM  = ((num) & 0x0F);
    17dc:	80 81       	ld	r24, Z
    17de:	8f 70       	andi	r24, 0x0F	; 15
    17e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    17e4:	30 c0       	rjmp	.+96     	; 0x1846 <_ZN3USB10onComEventEPS_+0x1fe>
  sei();

  if( (controlHeader.bmRequestType & 0x80) == 0x80 ) { waitIn(); } else { clearIn(); };    

  bool accepted = true;  
  switch(controlHeader.bRequest){
    17e6:	d3 01       	movw	r26, r6
    17e8:	11 96       	adiw	r26, 0x01	; 1
    17ea:	ec 91       	ld	r30, X
    17ec:	8e 2f       	mov	r24, r30
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	8c 30       	cpi	r24, 0x0C	; 12
    17f2:	91 05       	cpc	r25, r1
    17f4:	08 f0       	brcs	.+2      	; 0x17f8 <_ZN3USB10onComEventEPS_+0x1b0>
    17f6:	85 cf       	rjmp	.-246    	; 0x1702 <_ZN3USB10onComEventEPS_+0xba>
    17f8:	fc 01       	movw	r30, r24
    17fa:	ea 5a       	subi	r30, 0xAA	; 170
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__tablejump2__>
  if( state & (1<<EORSTI) ){
    handle->eorst();
  }  
}

void USB::onComEvent(USB *handle){  
    1802:	01 e0       	ldi	r16, 0x01	; 1
    1804:	10 e0       	ldi	r17, 0x00	; 0
  handle->activeEP = UEINT;
  handle->currentEndpoins = UENUM;
  handle->ControlRequest();  
 
  for(pos = 1;pos<7;pos++){
    mask = (1<<pos);
    1806:	cc 24       	eor	r12, r12
    1808:	c3 94       	inc	r12
    180a:	d1 2c       	mov	r13, r1
    if( ((handle->activeEP & mask) == mask) && (handle->epEvents[pos] != 0)) {
    180c:	73 01       	movw	r14, r6
    180e:	b1 e4       	ldi	r27, 0x41	; 65
    1810:	eb 0e       	add	r14, r27
    1812:	f1 1c       	adc	r15, r1
    this->sendBufPos++;
  }
}

void USB::selectEndPoint(uint8_t num){
  UENUM  = ((num) & 0x0F);
    1814:	0f 2e       	mov	r0, r31
    1816:	f9 ee       	ldi	r31, 0xE9	; 233
    1818:	af 2e       	mov	r10, r31
    181a:	b1 2c       	mov	r11, r1
    181c:	f0 2d       	mov	r31, r0
    181e:	bc cf       	rjmp	.-136    	; 0x1798 <_ZN3USB10onComEventEPS_+0x150>
    1820:	3f 70       	andi	r19, 0x0F	; 15
    1822:	f5 01       	movw	r30, r10
    1824:	30 83       	st	Z, r19
 
  for(pos = 1;pos<7;pos++){
    mask = (1<<pos);
    if( ((handle->activeEP & mask) == mask) && (handle->epEvents[pos] != 0)) {
      USB::selectEndPoint(pos);
      handle->epEvents[pos](handle);
    1826:	44 0f       	add	r20, r20
    1828:	55 1f       	adc	r21, r21
    182a:	46 0d       	add	r20, r6
    182c:	57 1d       	adc	r21, r7
    182e:	fa 01       	movw	r30, r20
    1830:	e5 55       	subi	r30, 0x55	; 85
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	01 90       	ld	r0, Z+
    1836:	f0 81       	ld	r31, Z
    1838:	e0 2d       	mov	r30, r0
    183a:	c3 01       	movw	r24, r6
    183c:	09 95       	icall
      handle->clearIn();      
    183e:	c3 01       	movw	r24, r6
    1840:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN3USB7clearInEv>
    1844:	c3 cf       	rjmp	.-122    	; 0x17cc <_ZN3USB10onComEventEPS_+0x184>
    }
  }
  selectEndPoint(handle->currentEndpoins);
}
    1846:	0f 90       	pop	r0
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	7f 90       	pop	r7
    1862:	6f 90       	pop	r6
    1864:	08 95       	ret

00001866 <_Z13setDescriptorv>:
  return true;
}

bool  setDescriptor(){
  return false;
}
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	08 95       	ret

0000186a <_Z16getConfigurationv>:

bool  getConfiguration(){
  return false;
}
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	08 95       	ret

0000186e <_Z12getInterfacev>:
  return true;
}

bool  getInterface(){
  return false;
}
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	08 95       	ret

00001872 <_Z12setInterfacev>:

bool  setInterface(){
  return false;
}
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	08 95       	ret

00001876 <__subsf3>:
    1876:	50 58       	subi	r21, 0x80	; 128

00001878 <__addsf3>:
    1878:	bb 27       	eor	r27, r27
    187a:	aa 27       	eor	r26, r26
    187c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__addsf3x>
    1880:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_round>
    1884:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_pscA>
    1888:	38 f0       	brcs	.+14     	; 0x1898 <__addsf3+0x20>
    188a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fp_pscB>
    188e:	20 f0       	brcs	.+8      	; 0x1898 <__addsf3+0x20>
    1890:	39 f4       	brne	.+14     	; 0x18a0 <__addsf3+0x28>
    1892:	9f 3f       	cpi	r25, 0xFF	; 255
    1894:	19 f4       	brne	.+6      	; 0x189c <__addsf3+0x24>
    1896:	26 f4       	brtc	.+8      	; 0x18a0 <__addsf3+0x28>
    1898:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_nan>
    189c:	0e f4       	brtc	.+2      	; 0x18a0 <__addsf3+0x28>
    189e:	e0 95       	com	r30
    18a0:	e7 fb       	bst	r30, 7
    18a2:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_inf>

000018a6 <__addsf3x>:
    18a6:	e9 2f       	mov	r30, r25
    18a8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fp_split3>
    18ac:	58 f3       	brcs	.-42     	; 0x1884 <__addsf3+0xc>
    18ae:	ba 17       	cp	r27, r26
    18b0:	62 07       	cpc	r22, r18
    18b2:	73 07       	cpc	r23, r19
    18b4:	84 07       	cpc	r24, r20
    18b6:	95 07       	cpc	r25, r21
    18b8:	20 f0       	brcs	.+8      	; 0x18c2 <__addsf3x+0x1c>
    18ba:	79 f4       	brne	.+30     	; 0x18da <__addsf3x+0x34>
    18bc:	a6 f5       	brtc	.+104    	; 0x1926 <__addsf3x+0x80>
    18be:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__fp_zero>
    18c2:	0e f4       	brtc	.+2      	; 0x18c6 <__addsf3x+0x20>
    18c4:	e0 95       	com	r30
    18c6:	0b 2e       	mov	r0, r27
    18c8:	ba 2f       	mov	r27, r26
    18ca:	a0 2d       	mov	r26, r0
    18cc:	0b 01       	movw	r0, r22
    18ce:	b9 01       	movw	r22, r18
    18d0:	90 01       	movw	r18, r0
    18d2:	0c 01       	movw	r0, r24
    18d4:	ca 01       	movw	r24, r20
    18d6:	a0 01       	movw	r20, r0
    18d8:	11 24       	eor	r1, r1
    18da:	ff 27       	eor	r31, r31
    18dc:	59 1b       	sub	r21, r25
    18de:	99 f0       	breq	.+38     	; 0x1906 <__addsf3x+0x60>
    18e0:	59 3f       	cpi	r21, 0xF9	; 249
    18e2:	50 f4       	brcc	.+20     	; 0x18f8 <__addsf3x+0x52>
    18e4:	50 3e       	cpi	r21, 0xE0	; 224
    18e6:	68 f1       	brcs	.+90     	; 0x1942 <__addsf3x+0x9c>
    18e8:	1a 16       	cp	r1, r26
    18ea:	f0 40       	sbci	r31, 0x00	; 0
    18ec:	a2 2f       	mov	r26, r18
    18ee:	23 2f       	mov	r18, r19
    18f0:	34 2f       	mov	r19, r20
    18f2:	44 27       	eor	r20, r20
    18f4:	58 5f       	subi	r21, 0xF8	; 248
    18f6:	f3 cf       	rjmp	.-26     	; 0x18de <__addsf3x+0x38>
    18f8:	46 95       	lsr	r20
    18fa:	37 95       	ror	r19
    18fc:	27 95       	ror	r18
    18fe:	a7 95       	ror	r26
    1900:	f0 40       	sbci	r31, 0x00	; 0
    1902:	53 95       	inc	r21
    1904:	c9 f7       	brne	.-14     	; 0x18f8 <__addsf3x+0x52>
    1906:	7e f4       	brtc	.+30     	; 0x1926 <__addsf3x+0x80>
    1908:	1f 16       	cp	r1, r31
    190a:	ba 0b       	sbc	r27, r26
    190c:	62 0b       	sbc	r22, r18
    190e:	73 0b       	sbc	r23, r19
    1910:	84 0b       	sbc	r24, r20
    1912:	ba f0       	brmi	.+46     	; 0x1942 <__addsf3x+0x9c>
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	a1 f0       	breq	.+40     	; 0x1940 <__addsf3x+0x9a>
    1918:	ff 0f       	add	r31, r31
    191a:	bb 1f       	adc	r27, r27
    191c:	66 1f       	adc	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	88 1f       	adc	r24, r24
    1922:	c2 f7       	brpl	.-16     	; 0x1914 <__addsf3x+0x6e>
    1924:	0e c0       	rjmp	.+28     	; 0x1942 <__addsf3x+0x9c>
    1926:	ba 0f       	add	r27, r26
    1928:	62 1f       	adc	r22, r18
    192a:	73 1f       	adc	r23, r19
    192c:	84 1f       	adc	r24, r20
    192e:	48 f4       	brcc	.+18     	; 0x1942 <__addsf3x+0x9c>
    1930:	87 95       	ror	r24
    1932:	77 95       	ror	r23
    1934:	67 95       	ror	r22
    1936:	b7 95       	ror	r27
    1938:	f7 95       	ror	r31
    193a:	9e 3f       	cpi	r25, 0xFE	; 254
    193c:	08 f0       	brcs	.+2      	; 0x1940 <__addsf3x+0x9a>
    193e:	b0 cf       	rjmp	.-160    	; 0x18a0 <__addsf3+0x28>
    1940:	93 95       	inc	r25
    1942:	88 0f       	add	r24, r24
    1944:	08 f0       	brcs	.+2      	; 0x1948 <__addsf3x+0xa2>
    1946:	99 27       	eor	r25, r25
    1948:	ee 0f       	add	r30, r30
    194a:	97 95       	ror	r25
    194c:	87 95       	ror	r24
    194e:	08 95       	ret

00001950 <__cmpsf2>:
    1950:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fp_cmp>
    1954:	08 f4       	brcc	.+2      	; 0x1958 <__cmpsf2+0x8>
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	08 95       	ret

0000195a <__divsf3>:
    195a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__divsf3x>
    195e:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_round>
    1962:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fp_pscB>
    1966:	58 f0       	brcs	.+22     	; 0x197e <__divsf3+0x24>
    1968:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_pscA>
    196c:	40 f0       	brcs	.+16     	; 0x197e <__divsf3+0x24>
    196e:	29 f4       	brne	.+10     	; 0x197a <__divsf3+0x20>
    1970:	5f 3f       	cpi	r21, 0xFF	; 255
    1972:	29 f0       	breq	.+10     	; 0x197e <__divsf3+0x24>
    1974:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_inf>
    1978:	51 11       	cpse	r21, r1
    197a:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__fp_szero>
    197e:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_nan>

00001982 <__divsf3x>:
    1982:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fp_split3>
    1986:	68 f3       	brcs	.-38     	; 0x1962 <__divsf3+0x8>

00001988 <__divsf3_pse>:
    1988:	99 23       	and	r25, r25
    198a:	b1 f3       	breq	.-20     	; 0x1978 <__divsf3+0x1e>
    198c:	55 23       	and	r21, r21
    198e:	91 f3       	breq	.-28     	; 0x1974 <__divsf3+0x1a>
    1990:	95 1b       	sub	r25, r21
    1992:	55 0b       	sbc	r21, r21
    1994:	bb 27       	eor	r27, r27
    1996:	aa 27       	eor	r26, r26
    1998:	62 17       	cp	r22, r18
    199a:	73 07       	cpc	r23, r19
    199c:	84 07       	cpc	r24, r20
    199e:	38 f0       	brcs	.+14     	; 0x19ae <__divsf3_pse+0x26>
    19a0:	9f 5f       	subi	r25, 0xFF	; 255
    19a2:	5f 4f       	sbci	r21, 0xFF	; 255
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	44 1f       	adc	r20, r20
    19aa:	aa 1f       	adc	r26, r26
    19ac:	a9 f3       	breq	.-22     	; 0x1998 <__divsf3_pse+0x10>
    19ae:	35 d0       	rcall	.+106    	; 0x1a1a <__divsf3_pse+0x92>
    19b0:	0e 2e       	mov	r0, r30
    19b2:	3a f0       	brmi	.+14     	; 0x19c2 <__divsf3_pse+0x3a>
    19b4:	e0 e8       	ldi	r30, 0x80	; 128
    19b6:	32 d0       	rcall	.+100    	; 0x1a1c <__divsf3_pse+0x94>
    19b8:	91 50       	subi	r25, 0x01	; 1
    19ba:	50 40       	sbci	r21, 0x00	; 0
    19bc:	e6 95       	lsr	r30
    19be:	00 1c       	adc	r0, r0
    19c0:	ca f7       	brpl	.-14     	; 0x19b4 <__divsf3_pse+0x2c>
    19c2:	2b d0       	rcall	.+86     	; 0x1a1a <__divsf3_pse+0x92>
    19c4:	fe 2f       	mov	r31, r30
    19c6:	29 d0       	rcall	.+82     	; 0x1a1a <__divsf3_pse+0x92>
    19c8:	66 0f       	add	r22, r22
    19ca:	77 1f       	adc	r23, r23
    19cc:	88 1f       	adc	r24, r24
    19ce:	bb 1f       	adc	r27, r27
    19d0:	26 17       	cp	r18, r22
    19d2:	37 07       	cpc	r19, r23
    19d4:	48 07       	cpc	r20, r24
    19d6:	ab 07       	cpc	r26, r27
    19d8:	b0 e8       	ldi	r27, 0x80	; 128
    19da:	09 f0       	breq	.+2      	; 0x19de <__divsf3_pse+0x56>
    19dc:	bb 0b       	sbc	r27, r27
    19de:	80 2d       	mov	r24, r0
    19e0:	bf 01       	movw	r22, r30
    19e2:	ff 27       	eor	r31, r31
    19e4:	93 58       	subi	r25, 0x83	; 131
    19e6:	5f 4f       	sbci	r21, 0xFF	; 255
    19e8:	3a f0       	brmi	.+14     	; 0x19f8 <__divsf3_pse+0x70>
    19ea:	9e 3f       	cpi	r25, 0xFE	; 254
    19ec:	51 05       	cpc	r21, r1
    19ee:	78 f0       	brcs	.+30     	; 0x1a0e <__divsf3_pse+0x86>
    19f0:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_inf>
    19f4:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__fp_szero>
    19f8:	5f 3f       	cpi	r21, 0xFF	; 255
    19fa:	e4 f3       	brlt	.-8      	; 0x19f4 <__divsf3_pse+0x6c>
    19fc:	98 3e       	cpi	r25, 0xE8	; 232
    19fe:	d4 f3       	brlt	.-12     	; 0x19f4 <__divsf3_pse+0x6c>
    1a00:	86 95       	lsr	r24
    1a02:	77 95       	ror	r23
    1a04:	67 95       	ror	r22
    1a06:	b7 95       	ror	r27
    1a08:	f7 95       	ror	r31
    1a0a:	9f 5f       	subi	r25, 0xFF	; 255
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <__divsf3_pse+0x78>
    1a0e:	88 0f       	add	r24, r24
    1a10:	91 1d       	adc	r25, r1
    1a12:	96 95       	lsr	r25
    1a14:	87 95       	ror	r24
    1a16:	97 f9       	bld	r25, 7
    1a18:	08 95       	ret
    1a1a:	e1 e0       	ldi	r30, 0x01	; 1
    1a1c:	66 0f       	add	r22, r22
    1a1e:	77 1f       	adc	r23, r23
    1a20:	88 1f       	adc	r24, r24
    1a22:	bb 1f       	adc	r27, r27
    1a24:	62 17       	cp	r22, r18
    1a26:	73 07       	cpc	r23, r19
    1a28:	84 07       	cpc	r24, r20
    1a2a:	ba 07       	cpc	r27, r26
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <__divsf3_pse+0xae>
    1a2e:	62 1b       	sub	r22, r18
    1a30:	73 0b       	sbc	r23, r19
    1a32:	84 0b       	sbc	r24, r20
    1a34:	ba 0b       	sbc	r27, r26
    1a36:	ee 1f       	adc	r30, r30
    1a38:	88 f7       	brcc	.-30     	; 0x1a1c <__divsf3_pse+0x94>
    1a3a:	e0 95       	com	r30
    1a3c:	08 95       	ret

00001a3e <__fixunssfsi>:
    1a3e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__fp_splitA>
    1a42:	88 f0       	brcs	.+34     	; 0x1a66 <__fixunssfsi+0x28>
    1a44:	9f 57       	subi	r25, 0x7F	; 127
    1a46:	98 f0       	brcs	.+38     	; 0x1a6e <__fixunssfsi+0x30>
    1a48:	b9 2f       	mov	r27, r25
    1a4a:	99 27       	eor	r25, r25
    1a4c:	b7 51       	subi	r27, 0x17	; 23
    1a4e:	b0 f0       	brcs	.+44     	; 0x1a7c <__fixunssfsi+0x3e>
    1a50:	e1 f0       	breq	.+56     	; 0x1a8a <__fixunssfsi+0x4c>
    1a52:	66 0f       	add	r22, r22
    1a54:	77 1f       	adc	r23, r23
    1a56:	88 1f       	adc	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	1a f0       	brmi	.+6      	; 0x1a62 <__fixunssfsi+0x24>
    1a5c:	ba 95       	dec	r27
    1a5e:	c9 f7       	brne	.-14     	; 0x1a52 <__fixunssfsi+0x14>
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <__fixunssfsi+0x4c>
    1a62:	b1 30       	cpi	r27, 0x01	; 1
    1a64:	91 f0       	breq	.+36     	; 0x1a8a <__fixunssfsi+0x4c>
    1a66:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__fp_zero>
    1a6a:	b1 e0       	ldi	r27, 0x01	; 1
    1a6c:	08 95       	ret
    1a6e:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__fp_zero>
    1a72:	67 2f       	mov	r22, r23
    1a74:	78 2f       	mov	r23, r24
    1a76:	88 27       	eor	r24, r24
    1a78:	b8 5f       	subi	r27, 0xF8	; 248
    1a7a:	39 f0       	breq	.+14     	; 0x1a8a <__fixunssfsi+0x4c>
    1a7c:	b9 3f       	cpi	r27, 0xF9	; 249
    1a7e:	cc f3       	brlt	.-14     	; 0x1a72 <__fixunssfsi+0x34>
    1a80:	86 95       	lsr	r24
    1a82:	77 95       	ror	r23
    1a84:	67 95       	ror	r22
    1a86:	b3 95       	inc	r27
    1a88:	d9 f7       	brne	.-10     	; 0x1a80 <__fixunssfsi+0x42>
    1a8a:	3e f4       	brtc	.+14     	; 0x1a9a <__fixunssfsi+0x5c>
    1a8c:	90 95       	com	r25
    1a8e:	80 95       	com	r24
    1a90:	70 95       	com	r23
    1a92:	61 95       	neg	r22
    1a94:	7f 4f       	sbci	r23, 0xFF	; 255
    1a96:	8f 4f       	sbci	r24, 0xFF	; 255
    1a98:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9a:	08 95       	ret

00001a9c <__floatunsisf>:
    1a9c:	e8 94       	clt
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <__floatsisf+0x12>

00001aa0 <__floatsisf>:
    1aa0:	97 fb       	bst	r25, 7
    1aa2:	3e f4       	brtc	.+14     	; 0x1ab2 <__floatsisf+0x12>
    1aa4:	90 95       	com	r25
    1aa6:	80 95       	com	r24
    1aa8:	70 95       	com	r23
    1aaa:	61 95       	neg	r22
    1aac:	7f 4f       	sbci	r23, 0xFF	; 255
    1aae:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	99 23       	and	r25, r25
    1ab4:	a9 f0       	breq	.+42     	; 0x1ae0 <__floatsisf+0x40>
    1ab6:	f9 2f       	mov	r31, r25
    1ab8:	96 e9       	ldi	r25, 0x96	; 150
    1aba:	bb 27       	eor	r27, r27
    1abc:	93 95       	inc	r25
    1abe:	f6 95       	lsr	r31
    1ac0:	87 95       	ror	r24
    1ac2:	77 95       	ror	r23
    1ac4:	67 95       	ror	r22
    1ac6:	b7 95       	ror	r27
    1ac8:	f1 11       	cpse	r31, r1
    1aca:	f8 cf       	rjmp	.-16     	; 0x1abc <__floatsisf+0x1c>
    1acc:	fa f4       	brpl	.+62     	; 0x1b0c <__floatsisf+0x6c>
    1ace:	bb 0f       	add	r27, r27
    1ad0:	11 f4       	brne	.+4      	; 0x1ad6 <__floatsisf+0x36>
    1ad2:	60 ff       	sbrs	r22, 0
    1ad4:	1b c0       	rjmp	.+54     	; 0x1b0c <__floatsisf+0x6c>
    1ad6:	6f 5f       	subi	r22, 0xFF	; 255
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	8f 4f       	sbci	r24, 0xFF	; 255
    1adc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ade:	16 c0       	rjmp	.+44     	; 0x1b0c <__floatsisf+0x6c>
    1ae0:	88 23       	and	r24, r24
    1ae2:	11 f0       	breq	.+4      	; 0x1ae8 <__floatsisf+0x48>
    1ae4:	96 e9       	ldi	r25, 0x96	; 150
    1ae6:	11 c0       	rjmp	.+34     	; 0x1b0a <__floatsisf+0x6a>
    1ae8:	77 23       	and	r23, r23
    1aea:	21 f0       	breq	.+8      	; 0x1af4 <__floatsisf+0x54>
    1aec:	9e e8       	ldi	r25, 0x8E	; 142
    1aee:	87 2f       	mov	r24, r23
    1af0:	76 2f       	mov	r23, r22
    1af2:	05 c0       	rjmp	.+10     	; 0x1afe <__floatsisf+0x5e>
    1af4:	66 23       	and	r22, r22
    1af6:	71 f0       	breq	.+28     	; 0x1b14 <__floatsisf+0x74>
    1af8:	96 e8       	ldi	r25, 0x86	; 134
    1afa:	86 2f       	mov	r24, r22
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	2a f0       	brmi	.+10     	; 0x1b0c <__floatsisf+0x6c>
    1b02:	9a 95       	dec	r25
    1b04:	66 0f       	add	r22, r22
    1b06:	77 1f       	adc	r23, r23
    1b08:	88 1f       	adc	r24, r24
    1b0a:	da f7       	brpl	.-10     	; 0x1b02 <__floatsisf+0x62>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	96 95       	lsr	r25
    1b10:	87 95       	ror	r24
    1b12:	97 f9       	bld	r25, 7
    1b14:	08 95       	ret

00001b16 <__fp_cmp>:
    1b16:	99 0f       	add	r25, r25
    1b18:	00 08       	sbc	r0, r0
    1b1a:	55 0f       	add	r21, r21
    1b1c:	aa 0b       	sbc	r26, r26
    1b1e:	e0 e8       	ldi	r30, 0x80	; 128
    1b20:	fe ef       	ldi	r31, 0xFE	; 254
    1b22:	16 16       	cp	r1, r22
    1b24:	17 06       	cpc	r1, r23
    1b26:	e8 07       	cpc	r30, r24
    1b28:	f9 07       	cpc	r31, r25
    1b2a:	c0 f0       	brcs	.+48     	; 0x1b5c <__fp_cmp+0x46>
    1b2c:	12 16       	cp	r1, r18
    1b2e:	13 06       	cpc	r1, r19
    1b30:	e4 07       	cpc	r30, r20
    1b32:	f5 07       	cpc	r31, r21
    1b34:	98 f0       	brcs	.+38     	; 0x1b5c <__fp_cmp+0x46>
    1b36:	62 1b       	sub	r22, r18
    1b38:	73 0b       	sbc	r23, r19
    1b3a:	84 0b       	sbc	r24, r20
    1b3c:	95 0b       	sbc	r25, r21
    1b3e:	39 f4       	brne	.+14     	; 0x1b4e <__fp_cmp+0x38>
    1b40:	0a 26       	eor	r0, r26
    1b42:	61 f0       	breq	.+24     	; 0x1b5c <__fp_cmp+0x46>
    1b44:	23 2b       	or	r18, r19
    1b46:	24 2b       	or	r18, r20
    1b48:	25 2b       	or	r18, r21
    1b4a:	21 f4       	brne	.+8      	; 0x1b54 <__fp_cmp+0x3e>
    1b4c:	08 95       	ret
    1b4e:	0a 26       	eor	r0, r26
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <__fp_cmp+0x3e>
    1b52:	a1 40       	sbci	r26, 0x01	; 1
    1b54:	a6 95       	lsr	r26
    1b56:	8f ef       	ldi	r24, 0xFF	; 255
    1b58:	81 1d       	adc	r24, r1
    1b5a:	81 1d       	adc	r24, r1
    1b5c:	08 95       	ret

00001b5e <__fp_inf>:
    1b5e:	97 f9       	bld	r25, 7
    1b60:	9f 67       	ori	r25, 0x7F	; 127
    1b62:	80 e8       	ldi	r24, 0x80	; 128
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	08 95       	ret

00001b6a <__fp_nan>:
    1b6a:	9f ef       	ldi	r25, 0xFF	; 255
    1b6c:	80 ec       	ldi	r24, 0xC0	; 192
    1b6e:	08 95       	ret

00001b70 <__fp_pscA>:
    1b70:	00 24       	eor	r0, r0
    1b72:	0a 94       	dec	r0
    1b74:	16 16       	cp	r1, r22
    1b76:	17 06       	cpc	r1, r23
    1b78:	18 06       	cpc	r1, r24
    1b7a:	09 06       	cpc	r0, r25
    1b7c:	08 95       	ret

00001b7e <__fp_pscB>:
    1b7e:	00 24       	eor	r0, r0
    1b80:	0a 94       	dec	r0
    1b82:	12 16       	cp	r1, r18
    1b84:	13 06       	cpc	r1, r19
    1b86:	14 06       	cpc	r1, r20
    1b88:	05 06       	cpc	r0, r21
    1b8a:	08 95       	ret

00001b8c <__fp_round>:
    1b8c:	09 2e       	mov	r0, r25
    1b8e:	03 94       	inc	r0
    1b90:	00 0c       	add	r0, r0
    1b92:	11 f4       	brne	.+4      	; 0x1b98 <__fp_round+0xc>
    1b94:	88 23       	and	r24, r24
    1b96:	52 f0       	brmi	.+20     	; 0x1bac <__fp_round+0x20>
    1b98:	bb 0f       	add	r27, r27
    1b9a:	40 f4       	brcc	.+16     	; 0x1bac <__fp_round+0x20>
    1b9c:	bf 2b       	or	r27, r31
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__fp_round+0x18>
    1ba0:	60 ff       	sbrs	r22, 0
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <__fp_round+0x20>
    1ba4:	6f 5f       	subi	r22, 0xFF	; 255
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	08 95       	ret

00001bae <__fp_split3>:
    1bae:	57 fd       	sbrc	r21, 7
    1bb0:	90 58       	subi	r25, 0x80	; 128
    1bb2:	44 0f       	add	r20, r20
    1bb4:	55 1f       	adc	r21, r21
    1bb6:	59 f0       	breq	.+22     	; 0x1bce <__fp_splitA+0x10>
    1bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bba:	71 f0       	breq	.+28     	; 0x1bd8 <__fp_splitA+0x1a>
    1bbc:	47 95       	ror	r20

00001bbe <__fp_splitA>:
    1bbe:	88 0f       	add	r24, r24
    1bc0:	97 fb       	bst	r25, 7
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	61 f0       	breq	.+24     	; 0x1bde <__fp_splitA+0x20>
    1bc6:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc8:	79 f0       	breq	.+30     	; 0x1be8 <__fp_splitA+0x2a>
    1bca:	87 95       	ror	r24
    1bcc:	08 95       	ret
    1bce:	12 16       	cp	r1, r18
    1bd0:	13 06       	cpc	r1, r19
    1bd2:	14 06       	cpc	r1, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	f2 cf       	rjmp	.-28     	; 0x1bbc <__fp_split3+0xe>
    1bd8:	46 95       	lsr	r20
    1bda:	f1 df       	rcall	.-30     	; 0x1bbe <__fp_splitA>
    1bdc:	08 c0       	rjmp	.+16     	; 0x1bee <__fp_splitA+0x30>
    1bde:	16 16       	cp	r1, r22
    1be0:	17 06       	cpc	r1, r23
    1be2:	18 06       	cpc	r1, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	f1 cf       	rjmp	.-30     	; 0x1bca <__fp_splitA+0xc>
    1be8:	86 95       	lsr	r24
    1bea:	71 05       	cpc	r23, r1
    1bec:	61 05       	cpc	r22, r1
    1bee:	08 94       	sec
    1bf0:	08 95       	ret

00001bf2 <__fp_zero>:
    1bf2:	e8 94       	clt

00001bf4 <__fp_szero>:
    1bf4:	bb 27       	eor	r27, r27
    1bf6:	66 27       	eor	r22, r22
    1bf8:	77 27       	eor	r23, r23
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	97 f9       	bld	r25, 7
    1bfe:	08 95       	ret

00001c00 <__gesf2>:
    1c00:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fp_cmp>
    1c04:	08 f4       	brcc	.+2      	; 0x1c08 <__gesf2+0x8>
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	08 95       	ret

00001c0a <__mulsf3>:
    1c0a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__mulsf3x>
    1c0e:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_round>
    1c12:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_pscA>
    1c16:	38 f0       	brcs	.+14     	; 0x1c26 <__mulsf3+0x1c>
    1c18:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fp_pscB>
    1c1c:	20 f0       	brcs	.+8      	; 0x1c26 <__mulsf3+0x1c>
    1c1e:	95 23       	and	r25, r21
    1c20:	11 f0       	breq	.+4      	; 0x1c26 <__mulsf3+0x1c>
    1c22:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_inf>
    1c26:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__fp_nan>
    1c2a:	11 24       	eor	r1, r1
    1c2c:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__fp_szero>

00001c30 <__mulsf3x>:
    1c30:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fp_split3>
    1c34:	70 f3       	brcs	.-36     	; 0x1c12 <__mulsf3+0x8>

00001c36 <__mulsf3_pse>:
    1c36:	95 9f       	mul	r25, r21
    1c38:	c1 f3       	breq	.-16     	; 0x1c2a <__mulsf3+0x20>
    1c3a:	95 0f       	add	r25, r21
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	55 1f       	adc	r21, r21
    1c40:	62 9f       	mul	r22, r18
    1c42:	f0 01       	movw	r30, r0
    1c44:	72 9f       	mul	r23, r18
    1c46:	bb 27       	eor	r27, r27
    1c48:	f0 0d       	add	r31, r0
    1c4a:	b1 1d       	adc	r27, r1
    1c4c:	63 9f       	mul	r22, r19
    1c4e:	aa 27       	eor	r26, r26
    1c50:	f0 0d       	add	r31, r0
    1c52:	b1 1d       	adc	r27, r1
    1c54:	aa 1f       	adc	r26, r26
    1c56:	64 9f       	mul	r22, r20
    1c58:	66 27       	eor	r22, r22
    1c5a:	b0 0d       	add	r27, r0
    1c5c:	a1 1d       	adc	r26, r1
    1c5e:	66 1f       	adc	r22, r22
    1c60:	82 9f       	mul	r24, r18
    1c62:	22 27       	eor	r18, r18
    1c64:	b0 0d       	add	r27, r0
    1c66:	a1 1d       	adc	r26, r1
    1c68:	62 1f       	adc	r22, r18
    1c6a:	73 9f       	mul	r23, r19
    1c6c:	b0 0d       	add	r27, r0
    1c6e:	a1 1d       	adc	r26, r1
    1c70:	62 1f       	adc	r22, r18
    1c72:	83 9f       	mul	r24, r19
    1c74:	a0 0d       	add	r26, r0
    1c76:	61 1d       	adc	r22, r1
    1c78:	22 1f       	adc	r18, r18
    1c7a:	74 9f       	mul	r23, r20
    1c7c:	33 27       	eor	r19, r19
    1c7e:	a0 0d       	add	r26, r0
    1c80:	61 1d       	adc	r22, r1
    1c82:	23 1f       	adc	r18, r19
    1c84:	84 9f       	mul	r24, r20
    1c86:	60 0d       	add	r22, r0
    1c88:	21 1d       	adc	r18, r1
    1c8a:	82 2f       	mov	r24, r18
    1c8c:	76 2f       	mov	r23, r22
    1c8e:	6a 2f       	mov	r22, r26
    1c90:	11 24       	eor	r1, r1
    1c92:	9f 57       	subi	r25, 0x7F	; 127
    1c94:	50 40       	sbci	r21, 0x00	; 0
    1c96:	9a f0       	brmi	.+38     	; 0x1cbe <__mulsf3_pse+0x88>
    1c98:	f1 f0       	breq	.+60     	; 0x1cd6 <__mulsf3_pse+0xa0>
    1c9a:	88 23       	and	r24, r24
    1c9c:	4a f0       	brmi	.+18     	; 0x1cb0 <__mulsf3_pse+0x7a>
    1c9e:	ee 0f       	add	r30, r30
    1ca0:	ff 1f       	adc	r31, r31
    1ca2:	bb 1f       	adc	r27, r27
    1ca4:	66 1f       	adc	r22, r22
    1ca6:	77 1f       	adc	r23, r23
    1ca8:	88 1f       	adc	r24, r24
    1caa:	91 50       	subi	r25, 0x01	; 1
    1cac:	50 40       	sbci	r21, 0x00	; 0
    1cae:	a9 f7       	brne	.-22     	; 0x1c9a <__mulsf3_pse+0x64>
    1cb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	80 f0       	brcs	.+32     	; 0x1cd6 <__mulsf3_pse+0xa0>
    1cb6:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_inf>
    1cba:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__fp_szero>
    1cbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc0:	e4 f3       	brlt	.-8      	; 0x1cba <__mulsf3_pse+0x84>
    1cc2:	98 3e       	cpi	r25, 0xE8	; 232
    1cc4:	d4 f3       	brlt	.-12     	; 0x1cba <__mulsf3_pse+0x84>
    1cc6:	86 95       	lsr	r24
    1cc8:	77 95       	ror	r23
    1cca:	67 95       	ror	r22
    1ccc:	b7 95       	ror	r27
    1cce:	f7 95       	ror	r31
    1cd0:	e7 95       	ror	r30
    1cd2:	9f 5f       	subi	r25, 0xFF	; 255
    1cd4:	c1 f7       	brne	.-16     	; 0x1cc6 <__mulsf3_pse+0x90>
    1cd6:	fe 2b       	or	r31, r30
    1cd8:	88 0f       	add	r24, r24
    1cda:	91 1d       	adc	r25, r1
    1cdc:	96 95       	lsr	r25
    1cde:	87 95       	ror	r24
    1ce0:	97 f9       	bld	r25, 7
    1ce2:	08 95       	ret

00001ce4 <__tablejump2__>:
    1ce4:	ee 0f       	add	r30, r30
    1ce6:	ff 1f       	adc	r31, r31
    1ce8:	05 90       	lpm	r0, Z+
    1cea:	f4 91       	lpm	r31, Z
    1cec:	e0 2d       	mov	r30, r0
    1cee:	09 94       	ijmp

00001cf0 <_exit>:
    1cf0:	f8 94       	cli

00001cf2 <__stop_program>:
    1cf2:	ff cf       	rjmp	.-2      	; 0x1cf2 <__stop_program>
